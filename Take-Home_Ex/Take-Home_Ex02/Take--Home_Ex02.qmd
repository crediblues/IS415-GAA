---
title: "Take Home Exercise 2"
subtitle: "Application of Geospatial Analysis Methods to Discover Thailand Drug Abuse at the Province Level"
author: "Ooi Wen Xian"
date: "September 25, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

# 1.0 Overview

Drug abuse is associated with significant negative health, financial and social consequences. Yet, illicit drug consumption remains highly prevalent and continues to be a growing problem worldwide. In 2021, 1 in 17 people aged 15–64 in the world had used a drug in the past 12 months. Notwithstanding population growth, the estimated number of drug users grew from 240 million in 2011 to 296 million in 2021.

The geopolitics of Thailand which is near the [Golden Triangle](https://en.wikipedia.org/wiki/Golden_Triangle_(Southeast_Asia)) of Indochina, the largest drug production site in Asia, and the constant transportation infrastructure development made Thailand became market and transit routes for drug trafficking to the third countries.

In Thailand, drug abuse is one of the major social issue. There are about 2.7 million youths using drugs in Thailand. Among youths aged between 15 and 19 years, there are about 300,000 who have needs for drug treatment. Most of Thai youths involved with drugs are vocational-school students, which nearly doubles in number compared to secondary-school students.

## 1.1 Study Objectives

We are interested to discover:

-   if the key indicators of drug abuse of Thailand are independent from space.

-   If the indicators of drug abuse is indeed spatial dependent, if then, detect where are the clusters and outliers, and the hotspots.

-   How the observations above evolve over time.

# 2.0 Importing Packages

We need to import the following packages that are used for this study:

-   [`sf`](https://rdrr.io/github/r-spatial/sf/man/sf-package.html) : to import, manage and process vector-based geospatial data in R.

-   [`st`](https://rdrr.io/cran/sf/man/st.html) : creates simple features from numeric vectors, matrices, or lists, enabling the representation and manipulation of spatial structures in R.

-   [`tidyverse`](https://www.tidyverse.org/) : a collection of R packages designed for data science, includes packages like `dplyr` for data manipulation, `ggplot2` for data visualization[`sfdep`](https://cran.r-project.org/web/packages/spdep/) : for computing spatial weights, global and local spatial autocorrelation statistics

-   [`tmap`](https://cran.r-project.org/web/packages/tmap/) : for creating static and interactive thematic visualisations and maps.

-   [`knitr`](https://cran.r-project.org/web/packages/spdep/) : to allow R code to be embedded in R Markdown documents.

```{r}
pacman::p_load(sf,st, tidyverse, tmap, knitr, sfdep, arrow)
```

# 3.0 Importing Data

For the purpose of this study, two data sets shall be used, they are:

-   [Thailand Drug Offenses \[2017-2022\]](https://www.kaggle.com/datasets/thaweewatboy/thailand-drug-offenses-2017-2022) at Kaggle.

-   [Thailand - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?) at HDX. We would be using the province boundary data set.

## 3.1 Importing Geospatial Data

As provinces are administrative level 1, we would be using the `tha_admbnda_adm1_rtsd_20220121` shapefile.

In this section, `st_read()` of **sf** package will be used to import `tha_admbnda_adm1_rtsd_20220121` dataset into R environment.

```{r}
thai_province <- st_read(dsn = "data/tha_adm_rtsd_itos_20210121_shp", layer = "tha_admbnda_adm1_rtsd_20220121")
```

```{r}
st_crs(thai_province)
```

We shall convert to UTM Zone 47N (EPSG: 32647), which is often used for Thailand.

```{r}
thai_province <- st_transform(thai_province, crs = 32647)
```

```{r}
st_crs(thai_province)
```

Let's take a look at what is in `tha_province_admin_boundary`:

```{r}
thai_province
```

```{r}
tmap_mode("plot")
tm_shape(thai_province)+
  tm_fill(col="white")+
  tm_borders(col = "black", lwd=0.3, alpha=0.6)+
  tm_layout(
    main.title = "Provinces in Thailand",
    main.title.size = 1,
    main.title.position = "center",
    legend.show = FALSE,
     frame = FALSE)
```

## 3.2 Importing Aspatial Data

In this section, `read_csv()` of **sf** package will be used to import the csv file into R environment. The output is R dataframe class.

```{r}
tha_drug_offences <- read_csv("data/thai_drug_offenses_2017_2022.csv")
tha_drug_offences
```

# 4.0 Data Wrangling

## 4.1 Correcting Province Name Mismatch

Let's check if the names of the provinces in our geospatial and aspatial data match each other

```{r}
tha_drug_offences_provinces <- unique(tha_drug_offences$province_en)
thai_province_provinces <- unique(thai_province$ADM1_EN)

# Find provinces in drug data that don't match the spatial data
mismatched_drug_provinces <- setdiff(tha_drug_offences_provinces, thai_province_provinces)

# Find provinces in spatial data that don't match the drug data
mismatched_spatial_provinces <- setdiff(thai_province_provinces, tha_drug_offences_provinces)

# Mismatched province names
cat("Provinces in drug data but not in spatial data:\n", mismatched_drug_provinces, "\n")
cat("Provinces in spatial data but not in drug data:\n", mismatched_spatial_provinces, "\n")

```

The provinces for Lop Buri and Bueng Kan are misspelled in `tha_drug_offences_provinces` .

Let's rename them.

```{r}
tha_drug_offences <- tha_drug_offences %>%
  mutate(province_en = case_when(
    province_en == "Loburi" ~ "Lop Buri",
    province_en == "buogkan" ~ "Bueng Kan",
    TRUE ~ province_en  # Keep other names unchanged
  ))

```

Checking again for mismatch

```{r}
tha_drug_offences_provinces <- unique(tha_drug_offences$province_en)
thai_province_provinces <- unique(thai_province$ADM1_EN)

# Find provinces in drug data that don't match the spatial data
mismatched_drug_provinces <- setdiff(tha_drug_offences_provinces, thai_province_provinces)

# Find provinces in spatial data that don't match the drug data
mismatched_spatial_provinces <- setdiff(thai_province_provinces, tha_drug_offences_provinces)

# Mismatched province names
cat("Provinces in drug data but not in spatial data:\n", mismatched_drug_provinces, "\n")
cat("Provinces in spatial data but not in drug data:\n", mismatched_spatial_provinces, "\n")
```

## 4.2 Drop redundant columns

To reduce the memory load, we can drop columns which are not relevant for this study and store only relevant columns

```{r}
tha_drug_offences <- subset(tha_drug_offences, select = c(fiscal_year, province_en, no_cases, types_of_drug_offenses))

tha_drug_offences

```

```{r}
thai_province <- subset(thai_province, select = c(Shape_Leng, Shape_Area, ADM1_EN, geometry))

thai_province 
```

## 4.3 Relational Join

Since `tha_drug_offences` only contains province names without any geometry, we will need to perform a **spatial join** to associate the drug data with the province boundaries.

The code chunk below will be used to join the attribute tables of `thai_province`’s SpatialPolygonsDataFrame with the attribute fields of `tha_drug_offences` dataframe. This is performed by using [`left_join()`](https://dplyr.tidyverse.org/reference/mutate-joins.html) of **dplyr** package.

```{r}
thai_province <- thai_province %>%
  left_join(tha_drug_offences , by = c("ADM1_EN" = "province_en"))
thai_province

```

```{r}
drug_offense_summary <- thai_province %>%
  group_by(ADM1_EN, types_of_drug_offenses) %>%
  summarise(total_cases = sum(no_cases, na.rm = TRUE), .groups = 'drop')
drug_offense_summary
```

Since we are concerned about drug use cases, let's filter our data for specific indicators only. We would be using these 5 indicators for our analysis.

-   drug_use_cases

-   possession_cases

-   possession_with_intent_to_distribute_cases

-   production_cases

-   trafficking_cases

```{r}
drug_abuse_indicators_summary <- thai_province %>%
  filter(types_of_drug_offenses %in% c("drug_use_cases", 
                                       "possession_cases", 
                                       "possession_with_intent_to_distribute_cases", 
                                       "production_cases",
                                       "trafficking_cases")) %>%
  group_by(ADM1_EN, fiscal_year, types_of_drug_offenses) %>%
  summarise(total_cases = sum(no_cases, na.rm = TRUE), .groups = 'drop')

# View the drug abuse indicators layer
drug_abuse_indicators_summary
```

```{r}
years <- unique(drug_abuse_indicators_summary$fiscal_year)

# Loop through each year to create and save individual plots
for (year in years) {
  year_data <- drug_abuse_indicators_summary %>%
    filter(fiscal_year == year)
  
  p <- ggplot(year_data, aes(x = ADM1_EN, y = total_cases, fill = types_of_drug_offenses)) +
    geom_col(position = position_dodge(width = 0.9), width = 0.7) +  # Create bars for total cases
    labs(title = paste("Distribution of Drug Abuse Indicators in", year),
         x = "Province",
         y = "Total Cases",
         fill = "Type of Drug Offense") +
    theme_minimal() +  # Use a minimal theme
    theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 4),
          legend.position = "right",
          legend.text = element_text(size = 4)) +
    scale_fill_brewer(palette = "Set3")
  print(p)
}

```

## 4.4 Visualising Type of Drug offences

Let's visualise the distribution of total drug cases from our indicators by using qtm() of tmap package, via equal and quantile classification styles.

```{r}
drug_offense_summary_all_cases <- thai_province %>%
  group_by(ADM1_EN, fiscal_year) %>%
  summarise(total_cases = sum(no_cases, na.rm = TRUE),
            geometry = first(geometry), .groups = 'drop')

print(drug_offense_summary_all_cases)
```


```{r}
tmap_mode('plot')
years <- unique(drug_offense_summary_all_cases$fiscal_year)

for (year in years) {
  year_data <- drug_offense_summary_all_cases[drug_offense_summary_all_cases$fiscal_year == year, ]
  
  # Create a map with equal interval classification
  equal <- tm_shape(year_data) +
    tm_fill("total_cases",
            n = 5,
            style = "equal",
            title = "Total Drug Use Cases") +
    tm_borders(alpha = 0.5) +
    tm_layout(main.title = paste("Equal Interval -", year), title.size = 0.5)
  
  # Create a map with quantile classification
  quantile <- tm_shape(year_data) +
    tm_fill("total_cases",
            n = 5,
            style = "quantile",
            title = "Total Drug Use Cases") +
    tm_borders(alpha = 0.5) +
    tm_layout(main.title = paste("Quantile -", year), title.size = 0.5)
  
  tmap_arranged <- tmap_arrange(equal, quantile, asp = 1, ncol = 2)
  
  print(tmap_arranged)
}

```

# 5.0 Global Measures of Spatial Autocorrelation
In this section, we would be computing global spatial autocorrelation statistics and to perform spatial complete randomness test for global spatial autocorrelation.

## 5.1 Computing Contiguity Spatial Weights

Before we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. province) in the study area.

In the code chunk below, st_neighbors() from sfdep package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries.  

The code chunk below is used to compute Queen contiguity weight matrix.
```{r}
yearly_nb_data <- list()

# Loop through each fiscal year
for (year in unique(drug_offense_summary_all_cases$fiscal_year)) {
  
  yearly_data <- drug_offense_summary_all_cases %>% filter(fiscal_year == year)
  
  wm_sf <- st_contiguity(yearly_data, queen=TRUE) 

  yearly_nb_data[[as.character(year)]] <- wm_sf
  
  print(paste("Summary for year", year))
  print(summary(wm_sf))
}

```

Phuket is the disconnected province, which makes sense geographically, as Phuket is an island province in Thailand, which could lead to its being classified as a separate component in spatial neighbor analysis and it being isolated when using the st_contiguity() function.

```{r}
for (year in unique(drug_offense_summary_all_cases$fiscal_year)) {
  
  yearly_data <- drug_offense_summary_all_cases %>%
    filter(fiscal_year == year, ADM1_EN != "Phuket")
  
  wm_sf <- st_contiguity(yearly_data, queen = TRUE) 
  
  yearly_nb_data[[as.character(year)]] <- wm_sf
  
  print(paste("Summary for year", year))
  print(summary(wm_sf))
}

```
Now, let's calculate the Weights.
```{r}
yearly_listw_data <- list()

for (year in names(yearly_nb_data)) {
  
  wm_q <- yearly_nb_data[[year]]

  yearly_data <- drug_offense_summary_all_cases %>%
    filter(fiscal_year == year, ADM1_EN != "Phuket")
  
  rswm_q <- st_weights(wm_q, style="W")
  
  yearly_listw_data[[year]] <- rswm_q
  
  print(paste("Weight object for year", year))
  print(rswm_q)

}
```

## 5.2 Global Measures of Spatial Autocorrelation: Moran’s I
The code performs Global Moran's I tests to measure spatial autocorrelation of drug offense cases for each year. For each year, it filters the data and calculates Moran's I using neighborhood weights and adjacency relations. The Moran's I statistic assesses whether high or low values of drug offense cases are clustered spatially or randomly distributed. The results for each year are stored in a list, providing insight into the spatial patterns of drug offenses over time.

global_moran() of the sfdep package is used.
```{r}
moran_results <- list()

for (year in names(yearly_nb_data)) {
  
  wt <- yearly_listw_data[[year]]
  
  nb <- yearly_nb_data[[year]]
  
  yearly_data <- drug_offense_summary_all_cases %>%
    filter(fiscal_year == year, ADM1_EN != "Phuket")
  
  var <- yearly_data$total_cases
  
  moran_test_result <- global_moran(var, nb, wt)
  
  moran_results[[year]] <- moran_test_result
  
  print(paste("Moran's I test result for year", year))
  print(moran_test_result)
}

```
Positive Moran's I values indicate a tendency for similar values (in this case, total_cases) to cluster in space, suggesting spatial autocorrelation.
Significant p-values (typically less than 0.05) indicate that the observed spatial autocorrelation is statistically significant. All years showed significant results, suggesting consistent clustering of drug offense cases over the years analyzed.

This indicates that areas with high (or low) levels of drug offenses tend to be spatially clustered, rather than randomly distributed.

The Moran’s I values increase over the years, particularly in 2021 (0.200) and 2022 (0.201), suggesting that clustering of similar drug offense levels became stronger in the later years.
The values of K, representing the total number of cases, decrease over time, possibly indicating fewer drug offenses, but more pronounced spatial clustering as the years progress.
The increasing Moran's I values suggest a growing spatial pattern of clustering in drug-related activity.

### 5.2.1 Computing and Visualising Global Moran’s I
The Global Moran’s I test, which can be implemented using the global_moran_test() function from the sfdep package, is a method for testing spatial autocorrelation

```{r}
moran_results <- list()

for (year in names(yearly_nb_data)) {
  
  wt <- yearly_listw_data[[year]]
  
  nb <- yearly_nb_data[[year]]
  
  yearly_data <- drug_offense_summary_all_cases %>%
    filter(fiscal_year == year, ADM1_EN != "Phuket")
  
  var <- yearly_data$total_cases
  
  moran_test_result <- global_moran_test(var,
                  nb,
                  wt,
                  alternative = "greater")
  
  moran_results[[year]] <- moran_test_result
  
  print(paste("Global Moran's I test result for year", year))
  print(moran_test_result)
}
```
Given that the p-value is much smaller than common significance levels (e.g., 0.05 or 0.01), we reject the null hypothesis of no spatial autocorrelation. This means that there is statistically significant evidence to suggest that the total_cases variable is spatially correlated in the regions analyzed.

The positive Moran's I statistic indicates that areas with higher counts of total cases are likely to be located near each other, suggesting a clustering effect. This can imply that factors leading to higher cases are spatially concentrated in certain regions.

The consistency of the Moran’s I statistic, standard deviate, and p-value across all years from 2017 to 2022 indicates that the spatial autocorrelation of total_cases has persisted over time. This could point to ongoing or systematic issues related to drug offenses in specific areas.
### 5.2.2 Performing Global Moran’s permutation test
The Global Moran’s permutation test was conducted for each year between 2017 and 2022 using 999 simulations to assess the significance of spatial autocorrelation in drug offense cases across Thailand. By comparing observed Moran's I values to a reference distribution generated through random permutations, the test provides a more robust measure of spatial clustering. The results, stored in gmoranMC_results, help to validate the significance of the observed spatial patterns and determine if the clustering of high or low drug offense cases is due to random chance or a real spatial process.

```{r}
gmoranMC_results <- list()

for (year in names(yearly_nb_data)) {
  
  wt <- yearly_listw_data[[year]]
  
  nb <- yearly_nb_data[[year]]
  
  yearly_data <- drug_offense_summary_all_cases %>%
    filter(fiscal_year == year, ADM1_EN != "Phuket")
  
  var <- yearly_data$total_cases
  
  gmoranMCresult <- global_moran_perm(var,
                  nb,
                  wt,
                  nsim = 999)
  
  gmoranMC_results[[year]] <- gmoranMCresult
  
  print(paste("Global Moran's I test result for year", year))
  print(gmoranMCresult)
}
```
Stronger significance is observed in 2019, 2021, and 2022, suggesting clustering of drug offenses. 2018 and 2020 show weaker evidence of spatial clustering.

```{r}
for (year in names(yearly_nb_data)) {
  gmoranMC <- gmoranMC_results[[year]]
  hist(gmoranMC$res, main="Histogram of Global Moran's I Monte-Carlo Simulation Results", xlab="Monte-Carlo Results", ylab="Frequency")

  abline(v = gmoranMC$statistic, col = "red")
}

```

## 5.3 Global Measures of Spatial Autocorrelation: Geary’s C
In this section, we would be computing Geary’s C statistics testing by using appropriate functions of spdep package.

### 5.3.1 Geary’s C test
The code chunk below performs Geary’s C test for spatial autocorrelation by using the global_c_test() function from the sfdep package.

```{r}
yearly_globalCgeary_results <- list()

for (year in names(yearly_nb_data)) {
  
  wt <- yearly_listw_data[[year]]
  
  nb <- yearly_nb_data[[year]]
  
  yearly_data <- drug_offense_summary_all_cases %>%
    filter(fiscal_year == year, ADM1_EN != "Phuket")
  
  var <- yearly_data$total_cases
  
  globalgearyc <- global_c_test(var,
                  nb,
                  wt,
                  alternative = "greater")
  
  yearly_globalCgeary_results[[year]] <- globalgearyc
  
  print(year)
  print(globalgearyc)
}

```
General Interpretation of Geary's C:
Geary's C statistic values close to 1 suggest no spatial autocorrelation (randomness in spatial data).
Values less than 1 indicate positive spatial autocorrelation (neighboring areas have similar values), meaning that nearby regions tend to have similar drug offense totals.
Values greater than 1 suggest negative spatial autocorrelation (neighboring areas have dissimilar values), meaning that nearby regions tend to have different drug offense totals.

Breakdown of Results:
The Geary's C test results for the years 2017 to 2022 provide an assessment of spatial autocorrelation, with a focus on local dissimilarities between neighboring regions:

2017: Geary's C statistic is 1.002 with a p-value of 0.506, suggesting no significant spatial autocorrelation.
2018: Geary's C statistic is 1.007 with a p-value of 0.519, indicating no significant spatial autocorrelation.
2019: Geary's C statistic is 0.934 with a p-value of 0.288, showing no significant spatial autocorrelation.
2020: Geary's C statistic is 0.955 with a p-value of 0.333, indicating no significant spatial autocorrelation.
2021: Geary's C statistic is 0.868 with a p-value of 0.069, suggesting moderate spatial autocorrelation, significant at the 10% level.
2022: Geary's C statistic is 0.855 with a p-value of 0.041, indicating significant spatial autocorrelation at the 5% level.

No strong spatial autocorrelation is found for most years, except for 2021 and 2022, where the data suggests positive spatial autocorrelation (regions with similar drug offense totals are likely to be near each other).
The spatial pattern is particularly significant in 2022, where the p-value indicates that neighboring regions are likely to have similar drug offense totals, showing statistically significant spatial clustering.
2021 also shows potential clustering, with a p-value close to 0.05, suggesting a trend towards spatial autocorrelation.

### 5.3.2 Computing Monte Carlo Geary’s C
Monte Carlo simulations for Geary's C statistic were performed for each year from 2017 to 2022, using 999 simulations. This approach provides a robust measure of local spatial autocorrelation by comparing observed dissimilarities between neighboring regions to a random distribution. 

global_c_perm() of sfdep is used.
```{r}
set.seed(1234)

yearly_geary_mc_results <- list()

for (year in names(yearly_listw_data)) {
  
  wt <- yearly_listw_data[[year]]
  
  nb <- yearly_nb_data[[year]]
  
  yearly_data <- drug_offense_summary_all_cases %>%
    filter(fiscal_year == year, ADM1_EN != "Phuket")
  
  var <- yearly_data$total_cases
  
  geary_mc_test_result <- global_c_perm(var,
                  nb,
                  wt,
                  nsim = 999)
  
  yearly_geary_mc_results[[year]] <- geary_mc_test_result
  
  print(paste("Geary's C Monte Carlo test result for year", year))
  print(geary_mc_test_result)
}

```
For years 2017, 2018, 2019, 2020: High p-values (>0.05) indicate no significant evidence to reject the null hypothesis, suggesting no significant spatial clustering of total cases.

For year 2021: The p-value of 0.063 is still approaching significance, indicating some evidence of spatial clustering but not strong enough to conclude definitively.

For year 2022: The p-value of 0.05 is right at the significance threshold, suggesting a potential trend toward spatial clustering of total cases.


```{r}
# Loop through each year in the yearly_geary_mc_results list
for (year in names(yearly_geary_mc_results)) {
  bperm <- yearly_geary_mc_results[[year]]
  
  mean_value <- mean(bperm$res[1:999])
  var_value <- var(bperm$res[1:999])
  
  summary_stats <- summary(bperm$res[1:999])
  print(paste("Summary statistics for year", year))
  print(summary_stats)
  
  hist(bperm$res, 
       freq=TRUE, 
       breaks=20, 
       xlab="Simulated Geary's C", 
       main=paste("Geary's C Monte Carlo Simulation -", year))
  
  # Add a vertical line at 1
  abline(v=1, col="red")
}
```

# 6.0 Local Measures of Spatial Autocorrelation

## 6.1 Computing and Mapping local Moran’s I
local_moran() function of sfdep package will be used for computing local Moran’s I.

```{r}
localMI_results <- list()

set.seed(1234)

for (year in names(yearly_nb_data)) {
  
  wt <- yearly_listw_data[[year]]
  
  nb <- yearly_nb_data[[year]]
  
  yearly_data <- drug_offense_summary_all_cases %>%
    filter(fiscal_year == year, ADM1_EN != "Phuket")
  
  var <- yearly_data$total_cases
  
  lisa <- yearly_data %>% 
    mutate(local_moran = local_moran(
      var, nb, wt, nsim = 99),
           .before = 1) %>%
    unnest(local_moran)
  print(lisa)

  map <- tm_shape(lisa) +
    tm_fill(col = "ii", 
            style = "pretty", 
            palette = "RdBu", 
            title = paste("Local Moran's I (Year:", year, ")")) +
    tm_borders(alpha = 0.5)
  print(map)
}
```
The maps reveal consistent spatial autocorrelation patterns over the three years, particularly highlighting Bangkok and southern Thailand as areas of strong positive clustering. Over time, the extent of provinces with strong spatial clustering appears to have slightly increased in 2019. The central and northern regions consistently show weaker spatial autocorrelation, with certain provinces exhibiting negative spatial autocorrelation values, reflecting spatial dissimilarity.

These maps suggest that there are persistent spatial patterns in drug offenses over time, with certain regions consistently exhibiting higher clustering.

Over the years from 2020 to 2022, there is a noticeable shift in drug offense spatial patterns:
2020: Spatial clustering was primarily concentrated in the south, around Bangkok.
2021: The focus shifts towards the northeast, indicating new regional clusters.
2022: The northeast becomes a significant area of high drug offenses, further reinforcing a shift in the spatial distribution pattern of offenses.

### 6.1.1 Mapping the local Moran’s I p-values
```{r}
set.seed(1234)
for (year in names(yearly_listw_data)) {
  wt <- yearly_listw_data[[year]]
  
  nb <- yearly_nb_data[[year]]
  
  yearly_data <- drug_offense_summary_all_cases %>%
    filter(fiscal_year == year, ADM1_EN != "Phuket")
  
  var <- yearly_data$total_cases
  
  lisa <- yearly_data %>% 
    mutate(local_moran = local_moran(
      var, nb, wt, nsim = 99),
           .before = 1) %>%
    unnest(local_moran)
  
# Map for p-values of Local Moran's I
map_p_value <- tm_shape(lisa) +
  tm_fill(col = "p_ii", 
          style = "pretty",
          palette = "YlGnBu",
          title = paste("Local Moran's I p-values (Year:", year, ")")) +
  tm_borders(alpha = 0.5)

print(map_p_value)
}
```

## 6.2 Creating a LISA Cluster Map
The LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.

### 6.2.3 Preparing LISA map classes and Plotting LISA map

```{r}
for (year in names(yearly_nb_data)) {
  wt <- yearly_listw_data[[year]]
  nb <- yearly_nb_data[[year]]
  
  yearly_data <- drug_offense_summary_all_cases %>%
    filter(fiscal_year == year, ADM1_EN != "Phuket")
  
  # Calculate Local Moran's I
  var <- yearly_data$total_cases
  lisa <- yearly_data %>% 
    mutate(local_moran = local_moran(var, nb, wt, nsim = 99),
           .before = 1) %>%
    unnest(local_moran)
  
  lisa_sig <- lisa %>% filter(p_ii < 0.05)
  
  m1 <- tm_shape(lisa) +
    tm_polygons() +
    tm_borders(alpha = 0.5) +
    tm_shape(lisa_sig) +
    tm_fill("p_ii", palette = "PuOr", midpoint = 0) + 
    tm_borders(alpha = 0.4) +
    tm_layout(main.title = paste("Local Moran's I - Significant (Year:", year, ")"))
  
  m2 <- tm_shape(lisa) +
    tm_polygons("total_cases",  
                palette = "Blues",
                style = "quantile", n = 10) +
    tm_layout(main.title = paste("Total Cases (Year:", year, ")"))

  print(tmap_arrange(m1, m2, asp = 1, ncol = 2))
}

```

# 7.0 Hot Spot and Cold Spot Area Analysis
## 7.1 Getis and Ord’s G-Statistics
Getis and Ord’s G-Statistics looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.

Positive Gi* values (purple shades) indicate high clustering (hot spots) of drug offenses in certain provinces.

Negative Gi* values (orange shades) suggest cold spots, i.e., areas with significantly low counts of offenses.


```{r}
hcsa_list <- list()
for (year in names(yearly_nb_data)) {
  
  wt <- yearly_listw_data[[year]]
  nb <- yearly_nb_data[[year]]
  yearly_data <- drug_offense_summary_all_cases %>%
    filter(fiscal_year == year, ADM1_EN != "Phuket")
  var <- yearly_data$total_cases
  
  hcsa <- yearly_data %>% 
    cbind(local_gstar_perm(var, nb, wt, nsim = 99)) %>%
    mutate("p_sim" = replace(`p_sim`, `p_sim` > 0.1, NA),
           "gi_star" = ifelse(is.na(`p_sim`), NA, `gi_star`))
  
  hcsa_list[[year]] <- hcsa
}

```

```{r}
for (year in names(yearly_nb_data)) {
  hcsa <- hcsa_list[[year]]
  map <- tm_shape(hcsa) +
  tm_fill("gi_star", palette="PuOr", midpoint=0, title="Gi*") + 
  tm_borders(alpha = 0.5)
  print(map)
}

```

The consistent hot spot in Bangkok (and surrounding regions) and shifting cold spots in northern Thailand indicate a stable pattern of high drug-related activity in urban areas.
Some variability in low-activity zones, potentially influenced by evolving local conditions.

## 7.2 Cluster Persistance
By dentifying the number of times a province was classified as a hot or cold spot, we can try to visualize the results through a heatmap of persistence. 
```{r}
hcsa_list_no_geom <- lapply(hcsa_list, function(x) st_set_geometry(x, NULL))

persistence_df <- hcsa_list_no_geom %>%
  purrr::reduce(full_join, by = "ADM1_EN", suffix = c("", "_next")) %>%
  rowwise() %>%
  mutate(
    hot_count = sum(c_across(contains("gi_star")) > 0, na.rm = TRUE),
    cold_count = sum(c_across(contains("gi_star")) < 0, na.rm = TRUE),
    neutral_count = sum(is.na(c_across(contains("gi_star"))))
  ) %>%
  ungroup()

print(persistence_df[, c("ADM1_EN", "hot_count", "cold_count", "neutral_count")])


```
```{r}
base_sf <- hcsa_list[[1]] 

# Perform a spatial join with the persistence data
persistence_sf <- base_sf %>%
  left_join(persistence_df, by = "ADM1_EN")
```

```{r}
hot_persistence_map <- tm_shape(persistence_sf) +
  tm_polygons(
    "hot_count", palette = "Purples", title = "Hot Spot Persistence",
    style = "cont", border.alpha = 0.5
  ) +
  tm_layout(main.title = "Hot Spot Persistence Across Years")

print(hot_persistence_map)

# Cold Spot Persistence Map
cold_persistence_map <- tm_shape(persistence_sf) +
  tm_polygons(
    "cold_count", palette = "Oranges", title = "Cold Spot Persistence",
    style = "cont", border.alpha = 0.5
  ) +
  tm_layout(main.title = "Cold Spot Persistence Across Years")

print(cold_persistence_map)

```
Bangkok and nearby provinces seem to be consistent hot spots over the years and other areas show some sporadic clustering, but with lower persistence.

Persistent cold spots are clustered aorund northern Thailand.
