{
  "hash": "c7d146a96502c6b495a5ad2fb2791397",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take Home Exercise 2\"\nsubtitle: \"Application of Geospatial Analysis Methods to Discover Thailand Drug Abuse at the Province Level\"\nauthor: \"Ooi Wen Xian\"\ndate: \"September 25, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n\n# 1.0 Overview\n\nDrug abuse is associated with significant negative health, financial and social consequences. Yet, illicit drug consumption remains highly prevalent and continues to be a growing problem worldwide. In 2021, 1 in 17 people aged 15–64 in the world had used a drug in the past 12 months. Notwithstanding population growth, the estimated number of drug users grew from 240 million in 2011 to 296 million in 2021.\n\nThe geopolitics of Thailand which is near the [Golden Triangle](https://en.wikipedia.org/wiki/Golden_Triangle_(Southeast_Asia)) of Indochina, the largest drug production site in Asia, and the constant transportation infrastructure development made Thailand became market and transit routes for drug trafficking to the third countries.\n\nIn Thailand, drug abuse is one of the major social issue. There are about 2.7 million youths using drugs in Thailand. Among youths aged between 15 and 19 years, there are about 300,000 who have needs for drug treatment. Most of Thai youths involved with drugs are vocational-school students, which nearly doubles in number compared to secondary-school students.\n\n## 1.1 Study Objectives\n\nWe are interested to discover:\n\n-   if the key indicators of drug abuse of Thailand are independent from space.\n\n-   If the indicators of drug abuse is indeed spatial dependent, if then, detect where are the clusters and outliers, and the hotspots.\n\n-   How the observations above evolve over time.\n\n# 2.0 Importing Packages\n\nWe need to import the following packages that are used for this study:\n\n-   [`sf`](https://rdrr.io/github/r-spatial/sf/man/sf-package.html) : to import, manage and process vector-based geospatial data in R.\n\n-   [`st`](https://rdrr.io/cran/sf/man/st.html) : creates simple features from numeric vectors, matrices, or lists, enabling the representation and manipulation of spatial structures in R.\n\n-   [`tidyverse`](https://www.tidyverse.org/) : a collection of R packages designed for data science, includes packages like `dplyr` for data manipulation, `ggplot2` for data visualization[`sfdep`](https://cran.r-project.org/web/packages/spdep/) : for computing spatial weights, global and local spatial autocorrelation statistics\n\n-   [`tmap`](https://cran.r-project.org/web/packages/tmap/) : for creating static and interactive thematic visualisations and maps.\n\n-   [`knitr`](https://cran.r-project.org/web/packages/spdep/) : to allow R code to be embedded in R Markdown documents.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf,st, tidyverse, tmap, knitr, spdep, arrow)\n```\n:::\n\n\n# 3.0 Importing Data\n\nFor the purpose of this study, two data sets shall be used, they are:\n\n-   [Thailand Drug Offenses \\[2017-2022\\]](https://www.kaggle.com/datasets/thaweewatboy/thailand-drug-offenses-2017-2022) at Kaggle.\n\n-   [Thailand - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?) at HDX. We would be using the province boundary data set.\n\n## 3.1 Importing Geospatial Data\n\nAs provinces are administrative level 1, we would be using the `tha_admbnda_adm1_rtsd_20220121` shapefile.\n\nIn this section, `st_read()` of **sf** package will be used to import `tha_admbnda_adm1_rtsd_20220121` dataset into R environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_province <- st_read(dsn = \"data/tha_adm_rtsd_itos_20210121_shp\", layer = \"tha_admbnda_adm1_rtsd_20220121\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `C:\\wamp64\\www\\crediblues\\IS415-GAA\\Take-Home_Ex\\Take-Home_Ex02\\data\\tha_adm_rtsd_itos_20210121_shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(thai_province)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n\n\n:::\n:::\n\n\nWe shall convert to UTM Zone 47N (EPSG: 32647), which is often used for Thailand.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_province <- st_transform(thai_province, crs = 32647)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(thai_province)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n```\n\n\n:::\n:::\n\n\nLet's take a look at what is in `tha_province_admin_boundary`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_province\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 325178.8 ymin: 620860.6 xmax: 1213656 ymax: 2263241\nProjected CRS: WGS 84 / UTM zone 47N\nFirst 10 features:\n   Shape_Leng Shape_Area                  ADM1_EN       ADM1_TH ADM1_PCODE\n1    2.417227 0.13133873                  Bangkok  กรุงเทพมหานคร       TH10\n2    1.695100 0.07926199             Samut Prakan    สมุทรปราการ       TH11\n3    1.251111 0.05323766               Nonthaburi         นนทบุรี       TH12\n4    1.884945 0.12698345             Pathum Thani        ปทุมธานี       TH13\n5    3.041716 0.21393797 Phra Nakhon Si Ayutthaya พระนครศรีอยุธยา       TH14\n6    1.739908 0.07920961                Ang Thong        อ่างทอง       TH15\n7    5.693342 0.54578838                 Lop Buri          ลพบุรี       TH16\n8    1.778326 0.06872655                Sing Buri         สิงห์บุรี       TH17\n9    2.896316 0.20907828                 Chai Nat         ชัยนาท       TH18\n10   4.766446 0.29208711                 Saraburi         สระบุรี       TH19\n   ADM1_REF ADM1ALT1EN ADM1ALT2EN ADM1ALT1TH ADM1ALT2TH  ADM0_EN   ADM0_TH\n1      <NA>       <NA>       <NA>       <NA>       <NA> Thailand ประเทศไทย\n2      <NA>       <NA>       <NA>       <NA>       <NA> Thailand ประเทศไทย\n3      <NA>       <NA>       <NA>       <NA>       <NA> Thailand ประเทศไทย\n4      <NA>       <NA>       <NA>       <NA>       <NA> Thailand ประเทศไทย\n5      <NA>       <NA>       <NA>       <NA>       <NA> Thailand ประเทศไทย\n6      <NA>       <NA>       <NA>       <NA>       <NA> Thailand ประเทศไทย\n7      <NA>       <NA>       <NA>       <NA>       <NA> Thailand ประเทศไทย\n8      <NA>       <NA>       <NA>       <NA>       <NA> Thailand ประเทศไทย\n9      <NA>       <NA>       <NA>       <NA>       <NA> Thailand ประเทศไทย\n10     <NA>       <NA>       <NA>       <NA>       <NA> Thailand ประเทศไทย\n   ADM0_PCODE       date    validOn    validTo                       geometry\n1          TH 2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((674339.8 15...\n2          TH 2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((687139.8 15...\n3          TH 2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((644817.9 15...\n4          TH 2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((704086 1575...\n5          TH 2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((662941.6 16...\n6          TH 2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((643472.8 16...\n7          TH 2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((751293.3 17...\n8          TH 2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((647136.1 16...\n9          TH 2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((620165.4 17...\n10         TH 2019-02-18 2022-01-22 -001-11-30 MULTIPOLYGON (((757935.1 16...\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\ntm_shape(thai_province)+\n  tm_fill(col=\"white\")+\n  tm_borders(col = \"black\", lwd=0.3, alpha=0.6)+\n  tm_layout(\n    main.title = \"Provinces in Thailand\",\n    main.title.size = 1,\n    main.title.position = \"center\",\n    legend.show = FALSE,\n     frame = FALSE)\n```\n\n::: {.cell-output-display}\n![](Take--Home_Ex02_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n## 3.2 Importing Aspatial Data\n\nIn this section, `read_csv()` of **sf** package will be used to import the csv file into R environment. The output is R dataframe class.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntha_drug_offences <- read_csv(\"data/thai_drug_offenses_2017_2022.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 7392 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): types_of_drug_offenses, province_th, province_en\ndbl (2): fiscal_year, no_cases\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\ntha_drug_offences\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7,392 × 5\n   fiscal_year types_of_drug_offenses no_cases province_th   province_en        \n         <dbl> <chr>                     <dbl> <chr>         <chr>              \n 1        2017 drug_use_cases            11871 กรุงเทพมหานคร  Bangkok            \n 2        2017 drug_use_cases              200 ชัยนาท         Chai Nat           \n 3        2017 drug_use_cases              553 นนทบุรี         Nonthaburi         \n 4        2017 drug_use_cases              450 ปทุมธานี        Pathum Thani       \n 5        2017 drug_use_cases              378 พระนครศรีอยุธยา Phra Nakhon Si Ayu…\n 6        2017 drug_use_cases              727 ลพบุรี          Loburi             \n 7        2017 drug_use_cases              820 สมุทรปราการ    Samut Prakan       \n 8        2017 drug_use_cases               69 สระบุรี         Saraburi           \n 9        2017 drug_use_cases              127 สิงห์บุรี         Sing Buri          \n10        2017 drug_use_cases              208 อ่างทอง        Ang Thong          \n# ℹ 7,382 more rows\n```\n\n\n:::\n:::\n\n\n# 4.0 Data Wrangling\n\n## 4.1 Correcting Province Name Mismatch\n\nLet's check if the names of the provinces in our geospatial and aspatial data match each other\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntha_drug_offences_provinces <- unique(tha_drug_offences$province_en)\nthai_province_provinces <- unique(thai_province$ADM1_EN)\n\n# Find provinces in drug data that don't match the spatial data\nmismatched_drug_provinces <- setdiff(tha_drug_offences_provinces, thai_province_provinces)\n\n# Find provinces in spatial data that don't match the drug data\nmismatched_spatial_provinces <- setdiff(thai_province_provinces, tha_drug_offences_provinces)\n\n# Mismatched province names\ncat(\"Provinces in drug data but not in spatial data:\\n\", mismatched_drug_provinces, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nProvinces in drug data but not in spatial data:\n Loburi buogkan \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Provinces in spatial data but not in drug data:\\n\", mismatched_spatial_provinces, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nProvinces in spatial data but not in drug data:\n Lop Buri Bueng Kan \n```\n\n\n:::\n:::\n\n\nThe provinces for Lop Buri and Bueng Kan are misspelled in `tha_drug_offences_provinces` .\n\nLet's rename them.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntha_drug_offences <- tha_drug_offences %>%\n  mutate(province_en = case_when(\n    province_en == \"Loburi\" ~ \"Lop Buri\",\n    province_en == \"buogkan\" ~ \"Bueng Kan\",\n    TRUE ~ province_en  # Keep other names unchanged\n  ))\n```\n:::\n\n\nChecking again for mismatch\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntha_drug_offences_provinces <- unique(tha_drug_offences$province_en)\nthai_province_provinces <- unique(thai_province$ADM1_EN)\n\n# Find provinces in drug data that don't match the spatial data\nmismatched_drug_provinces <- setdiff(tha_drug_offences_provinces, thai_province_provinces)\n\n# Find provinces in spatial data that don't match the drug data\nmismatched_spatial_provinces <- setdiff(thai_province_provinces, tha_drug_offences_provinces)\n\n# Mismatched province names\ncat(\"Provinces in drug data but not in spatial data:\\n\", mismatched_drug_provinces, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nProvinces in drug data but not in spatial data:\n  \n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"Provinces in spatial data but not in drug data:\\n\", mismatched_spatial_provinces, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nProvinces in spatial data but not in drug data:\n  \n```\n\n\n:::\n:::\n\n\n## 4.2 Drop redundant columns\n\nTo reduce the memory load, we can drop columns which are not relevant for this study and store only relevant columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntha_drug_offences <- subset(tha_drug_offences, select = c(fiscal_year, province_en, no_cases, types_of_drug_offenses))\n\ntha_drug_offences\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7,392 × 4\n   fiscal_year province_en              no_cases types_of_drug_offenses\n         <dbl> <chr>                       <dbl> <chr>                 \n 1        2017 Bangkok                     11871 drug_use_cases        \n 2        2017 Chai Nat                      200 drug_use_cases        \n 3        2017 Nonthaburi                    553 drug_use_cases        \n 4        2017 Pathum Thani                  450 drug_use_cases        \n 5        2017 Phra Nakhon Si Ayutthaya      378 drug_use_cases        \n 6        2017 Lop Buri                      727 drug_use_cases        \n 7        2017 Samut Prakan                  820 drug_use_cases        \n 8        2017 Saraburi                       69 drug_use_cases        \n 9        2017 Sing Buri                     127 drug_use_cases        \n10        2017 Ang Thong                     208 drug_use_cases        \n# ℹ 7,382 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_province <- subset(thai_province, select = c(Shape_Leng, Shape_Area, ADM1_EN, geometry))\n\nthai_province \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 77 features and 3 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 325178.8 ymin: 620860.6 xmax: 1213656 ymax: 2263241\nProjected CRS: WGS 84 / UTM zone 47N\nFirst 10 features:\n   Shape_Leng Shape_Area                  ADM1_EN\n1    2.417227 0.13133873                  Bangkok\n2    1.695100 0.07926199             Samut Prakan\n3    1.251111 0.05323766               Nonthaburi\n4    1.884945 0.12698345             Pathum Thani\n5    3.041716 0.21393797 Phra Nakhon Si Ayutthaya\n6    1.739908 0.07920961                Ang Thong\n7    5.693342 0.54578838                 Lop Buri\n8    1.778326 0.06872655                Sing Buri\n9    2.896316 0.20907828                 Chai Nat\n10   4.766446 0.29208711                 Saraburi\n                         geometry\n1  MULTIPOLYGON (((674339.8 15...\n2  MULTIPOLYGON (((687139.8 15...\n3  MULTIPOLYGON (((644817.9 15...\n4  MULTIPOLYGON (((704086 1575...\n5  MULTIPOLYGON (((662941.6 16...\n6  MULTIPOLYGON (((643472.8 16...\n7  MULTIPOLYGON (((751293.3 17...\n8  MULTIPOLYGON (((647136.1 16...\n9  MULTIPOLYGON (((620165.4 17...\n10 MULTIPOLYGON (((757935.1 16...\n```\n\n\n:::\n:::\n\n\n## 4.3 Relational Join\n\nSince `tha_drug_offences` only contains province names without any geometry, we will need to perform a **spatial join** to associate the drug data with the province boundaries.\n\nThe code chunk below will be used to join the attribute tables of `thai_province`’s SpatialPolygonsDataFrame with the attribute fields of `tha_drug_offences` dataframe. This is performed by using [`left_join()`](https://dplyr.tidyverse.org/reference/mutate-joins.html) of **dplyr** package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthai_province <- thai_province %>%\n  left_join(tha_drug_offences , by = c(\"ADM1_EN\" = \"province_en\"))\nthai_province\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 7392 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 325178.8 ymin: 620860.6 xmax: 1213656 ymax: 2263241\nProjected CRS: WGS 84 / UTM zone 47N\nFirst 10 features:\n   Shape_Leng Shape_Area ADM1_EN fiscal_year no_cases\n1    2.417227  0.1313387 Bangkok        2017    11871\n2    2.417227  0.1313387 Bangkok        2018    16480\n3    2.417227  0.1313387 Bangkok        2019    15067\n4    2.417227  0.1313387 Bangkok        2020     9724\n5    2.417227  0.1313387 Bangkok        2021     9625\n6    2.417227  0.1313387 Bangkok        2022     2755\n7    2.417227  0.1313387 Bangkok        2017    12371\n8    2.417227  0.1313387 Bangkok        2018    17131\n9    2.417227  0.1313387 Bangkok        2019    15458\n10   2.417227  0.1313387 Bangkok        2020     9754\n       types_of_drug_offenses                       geometry\n1              drug_use_cases MULTIPOLYGON (((674339.8 15...\n2              drug_use_cases MULTIPOLYGON (((674339.8 15...\n3              drug_use_cases MULTIPOLYGON (((674339.8 15...\n4              drug_use_cases MULTIPOLYGON (((674339.8 15...\n5              drug_use_cases MULTIPOLYGON (((674339.8 15...\n6              drug_use_cases MULTIPOLYGON (((674339.8 15...\n7  suspects_in_drug_use_cases MULTIPOLYGON (((674339.8 15...\n8  suspects_in_drug_use_cases MULTIPOLYGON (((674339.8 15...\n9  suspects_in_drug_use_cases MULTIPOLYGON (((674339.8 15...\n10 suspects_in_drug_use_cases MULTIPOLYGON (((674339.8 15...\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndrug_offense_summary <- thai_province %>%\n  group_by(ADM1_EN, types_of_drug_offenses) %>%\n  summarise(total_cases = sum(no_cases, na.rm = TRUE), .groups = 'drop')\ndrug_offense_summary\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 1232 features and 3 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 325178.8 ymin: 620860.6 xmax: 1213656 ymax: 2263241\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 1,232 × 4\n   ADM1_EN       types_of_drug_offenses    total_cases                  geometry\n   <chr>         <chr>                           <dbl>        <MULTIPOLYGON [m]>\n 1 Amnat Charoen conspiracy_cases                    5 (((1137720 1809629, 1137…\n 2 Amnat Charoen drug_use_cases                  11695 (((1137720 1809629, 1137…\n 3 Amnat Charoen export_cases                        0 (((1137720 1809629, 1137…\n 4 Amnat Charoen import_cases                        9 (((1137720 1809629, 1137…\n 5 Amnat Charoen possession_cases                 2127 (((1137720 1809629, 1137…\n 6 Amnat Charoen possession_with_intent_t…        2298 (((1137720 1809629, 1137…\n 7 Amnat Charoen production_cases                  280 (((1137720 1809629, 1137…\n 8 Amnat Charoen suspects_in_conspiracy_c…          13 (((1137720 1809629, 1137…\n 9 Amnat Charoen suspects_in_drug_use_cas…       11829 (((1137720 1809629, 1137…\n10 Amnat Charoen suspects_in_export_cases            0 (((1137720 1809629, 1137…\n# ℹ 1,222 more rows\n```\n\n\n:::\n:::\n\n\nSince we are concerned about drug use cases, let's filter our data for specific indicators only. We would be using these 5 indicators for our analysis.\n\n-   drug_use_cases\n\n-   possession_cases\n\n-   possession_with_intent_to_distribute_cases\n\n-   production_cases\n\n-   trafficking_cases\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndrug_abuse_indicators_summary <- thai_province %>%\n  filter(types_of_drug_offenses %in% c(\"drug_use_cases\", \n                                       \"possession_cases\", \n                                       \"possession_with_intent_to_distribute_cases\", \n                                       \"production_cases\",\n                                       \"trafficking_cases\")) %>%\n  group_by(ADM1_EN, fiscal_year, types_of_drug_offenses) %>%\n  summarise(total_cases = sum(no_cases, na.rm = TRUE), .groups = 'drop')\n\n# View the drug abuse indicators layer\ndrug_abuse_indicators_summary\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 2310 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 325178.8 ymin: 620860.6 xmax: 1213656 ymax: 2263241\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 2,310 × 5\n   ADM1_EN       fiscal_year types_of_drug_offenses                  total_cases\n   <chr>               <dbl> <chr>                                         <dbl>\n 1 Amnat Charoen        2017 drug_use_cases                                 1734\n 2 Amnat Charoen        2017 possession_cases                                293\n 3 Amnat Charoen        2017 possession_with_intent_to_distribute_c…         241\n 4 Amnat Charoen        2017 production_cases                                 14\n 5 Amnat Charoen        2017 trafficking_cases                               211\n 6 Amnat Charoen        2018 drug_use_cases                                 2038\n 7 Amnat Charoen        2018 possession_cases                                307\n 8 Amnat Charoen        2018 possession_with_intent_to_distribute_c…         269\n 9 Amnat Charoen        2018 production_cases                                 11\n10 Amnat Charoen        2018 trafficking_cases                               143\n# ℹ 2,300 more rows\n# ℹ 1 more variable: geometry <MULTIPOLYGON [m]>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get unique fiscal years\nyears <- unique(drug_abuse_indicators_summary$fiscal_year)\n\n# Loop through each year to create and save individual plots\nfor (year in years) {\n  # Filter data for the current year\n  year_data <- drug_abuse_indicators_summary %>%\n    filter(fiscal_year == year)\n  \n  # Create the plot\n  p <- ggplot(year_data, aes(x = ADM1_EN, y = total_cases, fill = types_of_drug_offenses)) +\n    geom_col(position = position_dodge(width = 0.9), width = 0.7) +  # Create bars for total cases\n    labs(title = paste(\"Distribution of Drug Abuse Indicators in\", year),\n         x = \"Province\",\n         y = \"Total Cases\",\n         fill = \"Type of Drug Offense\") +\n    theme_minimal() +  # Use a minimal theme\n    theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 4),  # Rotate x-axis labels for readability\n          legend.position = \"right\",\n          legend.text = element_text(size = 4)) +\n    scale_fill_brewer(palette = \"Set3\")  # Optional: Set a color palette for better visibility\n  \n  # Print the plot\n  print(p)\n}\n```\n\n::: {.cell-output-display}\n![](Take--Home_Ex02_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take--Home_Ex02_files/figure-html/unnamed-chunk-17-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take--Home_Ex02_files/figure-html/unnamed-chunk-17-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take--Home_Ex02_files/figure-html/unnamed-chunk-17-4.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take--Home_Ex02_files/figure-html/unnamed-chunk-17-5.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take--Home_Ex02_files/figure-html/unnamed-chunk-17-6.png){width=672}\n:::\n:::\n\n\n## 4.4 Visualising Type of Drug offences\n\nLet's visualise the distribution of total drug cases from our indicators by using qtm() of tmap package, via equal and quantile classification styles.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndrug_offense_summary_all_cases <- thai_province %>%\n  group_by(ADM1_EN, fiscal_year) %>%\n  summarise(total_cases = sum(no_cases, na.rm = TRUE),\n            geometry = first(geometry), .groups = 'drop')\n\n# View the summarized data\nprint(drug_offense_summary_all_cases)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 462 features and 3 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 325178.8 ymin: 620860.6 xmax: 1213656 ymax: 2263241\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 462 × 4\n   ADM1_EN       fiscal_year total_cases                                geometry\n   <chr>               <dbl>       <dbl>                      <MULTIPOLYGON [m]>\n 1 Amnat Charoen        2017        5076 (((1137720 1809629, 1137724 1809622, 1…\n 2 Amnat Charoen        2018        5651 (((1137720 1809629, 1137724 1809622, 1…\n 3 Amnat Charoen        2019        7339 (((1137720 1809629, 1137724 1809622, 1…\n 4 Amnat Charoen        2020        3949 (((1137720 1809629, 1137724 1809622, 1…\n 5 Amnat Charoen        2021        8961 (((1137720 1809629, 1137724 1809622, 1…\n 6 Amnat Charoen        2022        4459 (((1137720 1809629, 1137724 1809622, 1…\n 7 Ang Thong            2017        1614 (((643472.8 1636469, 643496 1636423, 6…\n 8 Ang Thong            2018        2717 (((643472.8 1636469, 643496 1636423, 6…\n 9 Ang Thong            2019        2781 (((643472.8 1636469, 643496 1636423, 6…\n10 Ang Thong            2020        2636 (((643472.8 1636469, 643496 1636423, 6…\n# ℹ 452 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\n# Get unique fiscal years\nyears <- unique(drug_offense_summary_all_cases$fiscal_year)\n\n# Loop through each year to create and display maps\nfor (year in years) {\n  # Filter data for the current year\n  year_data <- drug_offense_summary_all_cases[drug_offense_summary_all_cases$fiscal_year == year, ]\n  \n  # Create a map with equal interval classification\n  equal <- tm_shape(year_data) +\n    tm_fill(\"total_cases\",\n            n = 5,\n            style = \"equal\",\n            title = \"Total Drug Use Cases\") +\n    tm_borders(alpha = 0.5) +\n    tm_layout(main.title = paste(\"Equal Interval -\", year), title.size = 0.5)\n  \n  # Create a map with quantile classification\n  quantile <- tm_shape(year_data) +\n    tm_fill(\"total_cases\",\n            n = 5,\n            style = \"quantile\",\n            title = \"Total Drug Use Cases\") +\n    tm_borders(alpha = 0.5) +\n    tm_layout(main.title = paste(\"Quantile -\", year), title.size = 0.5)\n  \n  # Arrange the two maps side by side\n  tmap_arranged <- tmap_arrange(equal, quantile, asp = 1, ncol = 2)\n  \n  # Print the arranged map\n  print(tmap_arranged)\n}\n```\n\n::: {.cell-output-display}\n![](Take--Home_Ex02_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take--Home_Ex02_files/figure-html/unnamed-chunk-19-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take--Home_Ex02_files/figure-html/unnamed-chunk-19-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take--Home_Ex02_files/figure-html/unnamed-chunk-19-4.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take--Home_Ex02_files/figure-html/unnamed-chunk-19-5.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](Take--Home_Ex02_files/figure-html/unnamed-chunk-19-6.png){width=672}\n:::\n:::\n\n\n# 5.0 Global Measures of Spatial Autocorrelation\nIn this section, we would be computing global spatial autocorrelation statistics and to perform spatial complete randomness test for global spatial autocorrelation.\n\n## 5.1 Computing Contiguity Spatial Weights\n\nBefore we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. province) in the study area.\n\nIn the code chunk below, poly2nb() of spdep package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries.  \n\nThe code chunk below is used to compute Queen contiguity weight matrix.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create an empty list to store results for each year\nyearly_nb_data <- list()\n\n# Loop through each fiscal year\nfor (year in unique(drug_offense_summary_all_cases$fiscal_year)) {\n  \n  # Subset data for the current year\n  yearly_data <- drug_offense_summary_all_cases %>%\n    filter(fiscal_year == year)\n  \n  # Create neighbors list using poly2nb for the current year's data\n  wm_q <- poly2nb(as(yearly_data, \"Spatial\"), queen=TRUE)\n  \n  # Store the result\n  yearly_nb_data[[as.character(year)]] <- wm_q\n  \n  # Print summary for each year\n  print(paste(\"Summary for year\", year))\n  print(summary(wm_q))\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in poly2nb(as(yearly_data, \"Spatial\"), queen = TRUE): some observations have no neighbours;\nif this seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in poly2nb(as(yearly_data, \"Spatial\"), queen = TRUE): neighbour object has 2 sub-graphs;\nif this sub-graph count seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Summary for year 2017\"\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n48\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  8  9 \n 1  1  5 17 15 17 10  5  4  2 \n1 least connected region:\n71 with 1 link\n2 most connected regions:\n17 69 with 9 links\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in poly2nb(as(yearly_data, \"Spatial\"), queen = TRUE): some observations have no neighbours;\nif this seems unexpected, try increasing the snap argument.\nWarning in poly2nb(as(yearly_data, \"Spatial\"), queen = TRUE): neighbour object has 2 sub-graphs;\nif this sub-graph count seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Summary for year 2018\"\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n48\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  8  9 \n 1  1  5 17 15 17 10  5  4  2 \n1 least connected region:\n71 with 1 link\n2 most connected regions:\n17 69 with 9 links\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in poly2nb(as(yearly_data, \"Spatial\"), queen = TRUE): some observations have no neighbours;\nif this seems unexpected, try increasing the snap argument.\nWarning in poly2nb(as(yearly_data, \"Spatial\"), queen = TRUE): neighbour object has 2 sub-graphs;\nif this sub-graph count seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Summary for year 2019\"\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n48\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  8  9 \n 1  1  5 17 15 17 10  5  4  2 \n1 least connected region:\n71 with 1 link\n2 most connected regions:\n17 69 with 9 links\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in poly2nb(as(yearly_data, \"Spatial\"), queen = TRUE): some observations have no neighbours;\nif this seems unexpected, try increasing the snap argument.\nWarning in poly2nb(as(yearly_data, \"Spatial\"), queen = TRUE): neighbour object has 2 sub-graphs;\nif this sub-graph count seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Summary for year 2020\"\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n48\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  8  9 \n 1  1  5 17 15 17 10  5  4  2 \n1 least connected region:\n71 with 1 link\n2 most connected regions:\n17 69 with 9 links\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in poly2nb(as(yearly_data, \"Spatial\"), queen = TRUE): some observations have no neighbours;\nif this seems unexpected, try increasing the snap argument.\nWarning in poly2nb(as(yearly_data, \"Spatial\"), queen = TRUE): neighbour object has 2 sub-graphs;\nif this sub-graph count seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Summary for year 2021\"\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n48\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  8  9 \n 1  1  5 17 15 17 10  5  4  2 \n1 least connected region:\n71 with 1 link\n2 most connected regions:\n17 69 with 9 links\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in poly2nb(as(yearly_data, \"Spatial\"), queen = TRUE): some observations have no neighbours;\nif this seems unexpected, try increasing the snap argument.\nWarning in poly2nb(as(yearly_data, \"Spatial\"), queen = TRUE): neighbour object has 2 sub-graphs;\nif this sub-graph count seems unexpected, try increasing the snap argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Summary for year 2022\"\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n48\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  8  9 \n 1  1  5 17 15 17 10  5  4  2 \n1 least connected region:\n71 with 1 link\n2 most connected regions:\n17 69 with 9 links\n```\n\n\n:::\n:::\n\n\nSeems like there is a region which has no links. Let's find out the region.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check if the neighbor list is connected\ncomponents <- n.comp.nb(yearly_nb_data[['2017']])\ncomponents$comp.id  # Component ID of each region\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[39] 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[77] 1\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# After running your loop, check yearly_nb_data\nfor (year in names(yearly_nb_data)) {\n  wm_q <- yearly_nb_data[[year]]\n  \n  # Find indices of regions with no neighbors\n  no_link_indices <- which(card(wm_q) == 0)\n  \n  # If there are regions with no links, get their names\n  if (length(no_link_indices) > 0) {\n    cat(\"Regions with no links for year\", year, \":\\n\")\n    \n    # Get region names from the original dataset\n    for (index in no_link_indices) {\n      region_name <- yearly_data$ADM1_EN[index]  # Adjust based on your original dataframe structure\n      cat(region_name, \"\\n\")  # Print region names\n    }\n  } else {\n    cat(\"All regions have links for year\", year, \"\\n\")\n  }\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRegions with no links for year 2017 :\nPhuket \nRegions with no links for year 2018 :\nPhuket \nRegions with no links for year 2019 :\nPhuket \nRegions with no links for year 2020 :\nPhuket \nRegions with no links for year 2021 :\nPhuket \nRegions with no links for year 2022 :\nPhuket \n```\n\n\n:::\n:::\n\nPhuket is the disconnected province, which makes sense geographically, as Phuket is an island province in Thailand, which could lead to its being classified as a separate component in spatial neighbor analysis and it being isolated when using the poly2nb() function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyearly_listw_data <- list()\n\n# Loop through each year in the yearly_nb_data list\nfor (year in names(yearly_nb_data)) {\n  \n  # Get the neighbors list for the current year\n  wm_q <- yearly_nb_data[[year]]\n  \n  # Convert neighbors list to a listw object\n  rswm_q <- nb2listw(wm_q, style = \"W\", zero.policy = TRUE)\n  \n  # Store the result in the new list\n  yearly_listw_data[[year]] <- rswm_q\n  \n  # Print the result for each year if needed\n  print(paste(\"Weight object for year\", year))\n  print(rswm_q)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Weight object for year 2017\"\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n48\n2 disjoint connected subgraphs\n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1      S2\nW 76 5776 76 36.26113 315.652\n[1] \"Weight object for year 2018\"\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n48\n2 disjoint connected subgraphs\n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1      S2\nW 76 5776 76 36.26113 315.652\n[1] \"Weight object for year 2019\"\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n48\n2 disjoint connected subgraphs\n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1      S2\nW 76 5776 76 36.26113 315.652\n[1] \"Weight object for year 2020\"\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n48\n2 disjoint connected subgraphs\n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1      S2\nW 76 5776 76 36.26113 315.652\n[1] \"Weight object for year 2021\"\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n48\n2 disjoint connected subgraphs\n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1      S2\nW 76 5776 76 36.26113 315.652\n[1] \"Weight object for year 2022\"\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n48\n2 disjoint connected subgraphs\n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1      S2\nW 76 5776 76 36.26113 315.652\n```\n\n\n:::\n:::\n\n## 5.2 Global Measures of Spatial Autocorrelation: Moran’s I\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create an empty list to store Moran's I results for each year\nmoran_results <- list()\n\n# Loop through each year in the yearly_listw_data list\nfor (year in names(yearly_listw_data)) {\n  \n  # Get the corresponding weight object for the current year\n  rswm_q <- yearly_listw_data[[year]]\n  \n  # Subset the GDPPC data for the current year\n  yearly_data <- drug_offense_summary_all_cases %>%\n    filter(fiscal_year == year)\n  \n  # Run the Moran's I test\n  moran_test_result <- moran.test(yearly_data$total_cases, \n                                   listw = rswm_q, \n                                   zero.policy = TRUE, \n                                   na.action = na.omit)\n  \n  # Store the result in the moran_results list\n  moran_results[[year]] <- moran_test_result\n  \n  # Print the result for each year if needed\n  print(paste(\"Moran's I test result for year\", year))\n  print(moran_test_result)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Moran's I test result for year 2017\"\n\n\tMoran I test under randomisation\n\ndata:  yearly_data$total_cases  \nweights: rswm_q  \nn reduced by no-neighbour observations  \n\nMoran I statistic standard deviate = 2.4598, p-value = 0.006951\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.133140650      -0.013333333       0.003545946 \n\n[1] \"Moran's I test result for year 2018\"\n\n\tMoran I test under randomisation\n\ndata:  yearly_data$total_cases  \nweights: rswm_q  \nn reduced by no-neighbour observations  \n\nMoran I statistic standard deviate = 2.1529, p-value = 0.01566\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.116368909      -0.013333333       0.003629353 \n\n[1] \"Moran's I test result for year 2019\"\n\n\tMoran I test under randomisation\n\ndata:  yearly_data$total_cases  \nweights: rswm_q  \nn reduced by no-neighbour observations  \n\nMoran I statistic standard deviate = 2.4911, p-value = 0.006367\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.155405262      -0.013333333       0.004588259 \n\n[1] \"Moran's I test result for year 2020\"\n\n\tMoran I test under randomisation\n\ndata:  yearly_data$total_cases  \nweights: rswm_q  \nn reduced by no-neighbour observations  \n\nMoran I statistic standard deviate = 1.9969, p-value = 0.02292\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.129597584      -0.013333333       0.005123377 \n\n[1] \"Moran's I test result for year 2021\"\n\n\tMoran I test under randomisation\n\ndata:  yearly_data$total_cases  \nweights: rswm_q  \nn reduced by no-neighbour observations  \n\nMoran I statistic standard deviate = 2.8146, p-value = 0.002442\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.198888805      -0.013333333       0.005685208 \n\n[1] \"Moran's I test result for year 2022\"\n\n\tMoran I test under randomisation\n\ndata:  yearly_data$total_cases  \nweights: rswm_q  \nn reduced by no-neighbour observations  \n\nMoran I statistic standard deviate = 2.7999, p-value = 0.002556\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n       0.20112705       -0.01333333        0.00586698 \n```\n\n\n:::\n:::\n\nPositive Moran's I values indicate a tendency for similar values (in this case, total_cases) to cluster in space, suggesting spatial autocorrelation.\nSignificant p-values (typically less than 0.05) indicate that the observed spatial autocorrelation is statistically significant. All years showed significant results, suggesting consistent clustering of drug offense cases over the years analyzed.\n### 5.2.1 Computing and Visualising Monte Carlo Moran’s I\nThe code chunk below performs permutation test for Moran’s I statistic by using moran.mc() of spdep. A total of 1000 simulation will be performed.\n\nThe distribution of the statistical values as a histogram is also plotted by using the code chunk below.\n\nhist() and abline() of R Graphics are used.\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\n# Create an empty list to store Moran's I results for each year\nyearly_moran_mc_results <- list()\n\n# Loop through each year in the yearly_listw_data list\nfor (year in names(yearly_listw_data)) {\n  \n  # Get the corresponding weight object for the current year\n  rswm_q <- yearly_listw_data[[year]]\n  \n  # Subset the data for the current year\n  yearly_data <- drug_offense_summary_all_cases %>%\n    filter(fiscal_year == year)\n  \n  # Run the Monte Carlo Moran's I test\n  moranmc_test_result <- moran.mc(yearly_data$total_cases, listw = rswm_q, nsim = 999, zero.policy = TRUE, na.action = na.omit)\n  \n  # Store the result in the list\n  yearly_moran_mc_results[[year]] <- moranmc_test_result\n  \n  # Print the result for each year\n  print(paste(\"Moran's I test result for year\", year))\n  print(moranmc_test_result)\n  \n  # Access the simulated values (Monte Carlo simulations)\n  sim_results <- moranmc_test_result$res\n  \n  # Display summary statistics of the simulations\n  cat(\"Summary of Monte Carlo simulations for year\", year, \":\\n\")\n  print(summary(sim_results))\n  \n  # Plot histogram of the simulated Moran's I values\n  hist(sim_results, freq = TRUE, breaks = 20, xlab = \"Simulated Moran's I\", main = paste(\"Histogram of Simulated Moran's I for\", year))\n  \n  # Add a red vertical line for observed Moran's I\n  abline(v = moranmc_test_result$statistic, col = \"red\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Moran's I test result for year 2017\"\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  yearly_data$total_cases \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.13314, observed rank = 985, p-value = 0.015\nalternative hypothesis: greater\n\nSummary of Monte Carlo simulations for year 2017 :\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.17292 -0.05654 -0.02237 -0.01335  0.02272  0.24096 \n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take--Home_Ex02_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Moran's I test result for year 2018\"\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  yearly_data$total_cases \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.11637, observed rank = 971, p-value = 0.029\nalternative hypothesis: greater\n\nSummary of Monte Carlo simulations for year 2018 :\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.16344 -0.05374 -0.01774 -0.01221  0.02035  0.20400 \n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take--Home_Ex02_files/figure-html/unnamed-chunk-25-2.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Moran's I test result for year 2019\"\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  yearly_data$total_cases \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.15541, observed rank = 981, p-value = 0.019\nalternative hypothesis: greater\n\nSummary of Monte Carlo simulations for year 2019 :\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n-0.174191 -0.057523 -0.015853 -0.009667  0.030913  0.262306 \n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take--Home_Ex02_files/figure-html/unnamed-chunk-25-3.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Moran's I test result for year 2020\"\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  yearly_data$total_cases \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.1296, observed rank = 971, p-value = 0.029\nalternative hypothesis: greater\n\nSummary of Monte Carlo simulations for year 2020 :\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.19732 -0.06676 -0.02146 -0.01631  0.02624  0.40270 \n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take--Home_Ex02_files/figure-html/unnamed-chunk-25-4.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Moran's I test result for year 2021\"\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  yearly_data$total_cases \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.19889, observed rank = 995, p-value = 0.005\nalternative hypothesis: greater\n\nSummary of Monte Carlo simulations for year 2021 :\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.24142 -0.06727 -0.01829 -0.01499  0.02908  0.24014 \n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take--Home_Ex02_files/figure-html/unnamed-chunk-25-5.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Moran's I test result for year 2022\"\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  yearly_data$total_cases \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.20113, observed rank = 996, p-value = 0.004\nalternative hypothesis: greater\n\nSummary of Monte Carlo simulations for year 2022 :\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.21823 -0.06399 -0.01710 -0.01178  0.03867  0.30736 \n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take--Home_Ex02_files/figure-html/unnamed-chunk-25-6.png){width=672}\n:::\n:::\n\nGiven that the p-value is much smaller than common significance levels (e.g., 0.05 or 0.01), we reject the null hypothesis of no spatial autocorrelation. This means that there is statistically significant evidence to suggest that the total_cases variable is spatially correlated in the regions analyzed.\n\nThe positive Moran's I statistic indicates that areas with higher counts of total cases are likely to be located near each other, suggesting a clustering effect. This can imply that factors leading to higher cases are spatially concentrated in certain regions.\n\nThe consistency of the Moran’s I statistic, standard deviate, and p-value across all years from 2017 to 2022 indicates that the spatial autocorrelation of total_cases has persisted over time. This could point to ongoing or systematic issues related to drug offenses in specific areas.\n\n## 5.3 Global Measures of Spatial Autocorrelation: Geary’s C\nIn this section, we would be computing Geary’s C statistics testing by using appropriate functions of spdep package.\n\n### 5.3.1 Geary’s C test\nThe code chunk below performs Geary’s C test for spatial autocorrelation by using geary.test() of spdep.\n\n::: {.cell}\n\n```{.r .cell-code}\nyearly_geary_results <- list()\n\n# Loop through each year in the yearly_listw_data list\nfor (year in names(yearly_listw_data)) {\n  \n  # Get the corresponding weight object for the current year\n  rswm_q <- yearly_listw_data[[year]]\n  \n  # Subset the total_cases data for the current year\n  yearly_data <- drug_offense_summary_all_cases %>%\n    filter(fiscal_year == year)\n  \n  # Run the Geary's C test\n  geary_test_result <- geary.test(yearly_data$total_cases, listw = rswm_q, zero.policy = TRUE, na.action = na.omit)\n  \n  # Store the result in the geary_results list\n  yearly_geary_results[[year]] <- geary_test_result\n  \n  # Print the result for each year if needed\n  print(paste(\"Geary's C test result for year\", year))\n  print(geary_test_result)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Geary's C test result for year 2017\"\n\n\tGeary C test under randomisation\n\ndata:  yearly_data$total_cases \nweights: rswm_q  \nn reduced by no-neighbour observations \n\nGeary C statistic standard deviate = 0.058508, p-value = 0.4767\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n       0.99195695        1.00000000        0.01889807 \n\n[1] \"Geary's C test result for year 2018\"\n\n\tGeary C test under randomisation\n\ndata:  yearly_data$total_cases \nweights: rswm_q  \nn reduced by no-neighbour observations \n\nGeary C statistic standard deviate = -0.010232, p-value = 0.5041\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n       1.00139028        1.00000000        0.01846379 \n\n[1] \"Geary's C test result for year 2019\"\n\n\tGeary C test under randomisation\n\ndata:  yearly_data$total_cases \nweights: rswm_q  \nn reduced by no-neighbour observations \n\nGeary C statistic standard deviate = 0.60322, p-value = 0.2732\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n       0.92998745        1.00000000        0.01347099 \n\n[1] \"Geary's C test result for year 2020\"\n\n\tGeary C test under randomisation\n\ndata:  yearly_data$total_cases \nweights: rswm_q  \nn reduced by no-neighbour observations \n\nGeary C statistic standard deviate = 0.51845, p-value = 0.3021\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n       0.94640945        1.00000000        0.01068475 \n\n[1] \"Geary's C test result for year 2021\"\n\n\tGeary C test under randomisation\n\ndata:  yearly_data$total_cases \nweights: rswm_q  \nn reduced by no-neighbour observations \n\nGeary C statistic standard deviate = 1.5384, p-value = 0.06197\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n      0.864483164       1.000000000       0.007759433 \n\n[1] \"Geary's C test result for year 2022\"\n\n\tGeary C test under randomisation\n\ndata:  yearly_data$total_cases \nweights: rswm_q  \nn reduced by no-neighbour observations \n\nGeary C statistic standard deviate = 1.8518, p-value = 0.03203\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n      0.847151443       1.000000000       0.006812988 \n```\n\n\n:::\n:::\n\nGeneral Interpretation of Geary's C:\nGeary's C statistic values close to 1 suggest no spatial autocorrelation (randomness in spatial data).\nValues less than 1 indicate positive spatial autocorrelation (neighboring areas have similar values), meaning that nearby regions tend to have similar drug offense totals.\nValues greater than 1 suggest negative spatial autocorrelation (neighboring areas have dissimilar values), meaning that nearby regions tend to have different drug offense totals.\n\nBreakdown of Results:\n2017:\nGeary's C = 0.99196, p-value = 0.4767\nThe Geary's C value is close to 1, suggesting little to no spatial autocorrelation. The p-value indicates that there is no statistically significant spatial autocorrelation in drug offense totals for this year.\n\n2018:\nGeary's C = 1.00139, p-value = 0.5041\nThe Geary's C value is slightly above 1, but still very close to 1, suggesting no significant spatial autocorrelation. The p-value is not significant.\n\n2019:\nGeary's C = 0.92999, p-value = 0.2732\nThe Geary’s C value is less than 1, indicating a weak positive spatial autocorrelation (regions with similar drug offense totals are more likely to be adjacent). However, the p-value indicates that this effect is not statistically significant.\n\n2020:\nGeary's C = 0.94641, p-value = 0.3021\nSimilar to 2019, the Geary’s C statistic is less than 1, suggesting weak positive spatial autocorrelation, but again the p-value is not statistically significant.\n\n2021:\nGeary's C = 0.86448, p-value = 0.06197\nThe Geary's C value is lower than 1, suggesting stronger positive spatial autocorrelation compared to previous years. The p-value (0.06197) is approaching significance at the 0.05 level, indicating a possible spatial pattern in drug offenses.\n\n2022:\nGeary's C = 0.84715, p-value = 0.03203\nThe Geary's C value is notably less than 1, indicating stronger positive spatial autocorrelation for this year. The p-value (0.03203) is statistically significant, meaning that for 2022, there is significant evidence of spatial clustering in drug offense totals.\n\nNo strong spatial autocorrelation is found for most years, except for 2021 and 2022, where the data suggests positive spatial autocorrelation (regions with similar drug offense totals are likely to be near each other).\nThe spatial pattern is particularly significant in 2022, where the p-value indicates that neighboring regions are likely to have similar drug offense totals, showing statistically significant spatial clustering.\n2021 also shows potential clustering, with a p-value close to 0.05, suggesting a trend towards spatial autocorrelation.\n\n### 5.3.2 Computing Monte Carlo Geary’s C\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\nyearly_geary_mc_results <- list()\n\nfor (year in names(yearly_listw_data)) {\n  \n  rswm_q <- yearly_listw_data[[year]]\n  \n  yearly_data <- drug_offense_summary_all_cases %>%\n    filter(fiscal_year == year)\n  \n  geary_mc_test_result <- geary.mc(yearly_data$total_cases, \n                                   listw = rswm_q, \n                                   nsim = 999, \n                                   zero.policy = TRUE, \n                                   na.action = na.omit)\n  \n  yearly_geary_mc_results[[year]] <- geary_mc_test_result\n  \n  print(paste(\"Geary's C Monte Carlo test result for year\", year))\n  print(geary_mc_test_result)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Geary's C Monte Carlo test result for year 2017\"\n\n\tMonte-Carlo simulation of Geary C\n\ndata:  yearly_data$total_cases \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.99196, observed rank = 536, p-value = 0.536\nalternative hypothesis: greater\n\n[1] \"Geary's C Monte Carlo test result for year 2018\"\n\n\tMonte-Carlo simulation of Geary C\n\ndata:  yearly_data$total_cases \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 1.0014, observed rank = 568, p-value = 0.568\nalternative hypothesis: greater\n\n[1] \"Geary's C Monte Carlo test result for year 2019\"\n\n\tMonte-Carlo simulation of Geary C\n\ndata:  yearly_data$total_cases \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.92999, observed rank = 339, p-value = 0.339\nalternative hypothesis: greater\n\n[1] \"Geary's C Monte Carlo test result for year 2020\"\n\n\tMonte-Carlo simulation of Geary C\n\ndata:  yearly_data$total_cases \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.94641, observed rank = 330, p-value = 0.33\nalternative hypothesis: greater\n\n[1] \"Geary's C Monte Carlo test result for year 2021\"\n\n\tMonte-Carlo simulation of Geary C\n\ndata:  yearly_data$total_cases \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.86448, observed rank = 102, p-value = 0.102\nalternative hypothesis: greater\n\n[1] \"Geary's C Monte Carlo test result for year 2022\"\n\n\tMonte-Carlo simulation of Geary C\n\ndata:  yearly_data$total_cases \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.84715, observed rank = 52, p-value = 0.052\nalternative hypothesis: greater\n```\n\n\n:::\n:::\n\nFor years 2017, 2018, 2019, and 2020: \n- High p-values (>0.05) indicate that there is no significant evidence to reject the null hypothesis, suggesting that there is no significant spatial clustering of total cases.\n\nFor year 2021: \n- A p-value of 0.102 is approaching significance, indicating some evidence of spatial clustering but not strong enough to conclude.\nYear 2022: The p-value of 0.052 is very close to the significance threshold (0.05), indicating a potential trend toward spatial clustering of total cases, warranting further investigation.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\n# Loop through each year in the yearly_geary_mc_results list\nfor (year in names(yearly_geary_mc_results)) {\n  bperm <- yearly_geary_mc_results[[year]]\n  \n  # Calculate mean and variance of simulated values\n  mean_value <- mean(bperm$res[1:999])\n  var_value <- var(bperm$res[1:999])\n  \n  # Print summary statistics\n  summary_stats <- summary(bperm$res[1:999])\n  print(paste(\"Summary statistics for year\", year))\n  print(summary_stats)\n  \n  # Create histogram\n  hist(bperm$res, \n       freq=TRUE, \n       breaks=20, \n       xlab=\"Simulated Geary's C\", \n       main=paste(\"Geary's C Monte Carlo Simulation -\", year))\n  \n  # Add a vertical line at 1\n  abline(v=1, col=\"red\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Summary statistics for year 2017\"\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.3236  0.9003  0.9820  0.9866  1.0698  1.4819 \n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take--Home_Ex02_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Summary statistics for year 2018\"\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.3034  0.8989  0.9775  0.9883  1.0811  1.4229 \n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take--Home_Ex02_files/figure-html/unnamed-chunk-28-2.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Summary statistics for year 2019\"\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.4352  0.9037  0.9797  0.9839  1.0666  1.4236 \n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take--Home_Ex02_files/figure-html/unnamed-chunk-28-3.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Summary statistics for year 2020\"\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.5151  0.9213  0.9929  0.9913  1.0631  1.3717 \n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take--Home_Ex02_files/figure-html/unnamed-chunk-28-4.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Summary statistics for year 2021\"\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7094  0.9321  0.9882  0.9871  1.0463  1.3191 \n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take--Home_Ex02_files/figure-html/unnamed-chunk-28-5.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Summary statistics for year 2022\"\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.6146  0.9328  0.9915  0.9892  1.0471  1.2546 \n```\n\n\n:::\n\n::: {.cell-output-display}\n![](Take--Home_Ex02_files/figure-html/unnamed-chunk-28-6.png){width=672}\n:::\n:::\n\n\n# 6.0 Local Measures of Spatial Autocorrelation\n\n# 6.1 Computing local Moran’s I\n\n",
    "supporting": [
      "Take--Home_Ex02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}