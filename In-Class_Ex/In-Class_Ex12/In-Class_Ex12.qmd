---
title: "In-Class Exercise 12"
author: "Ooi Wen Xian"
date: "November 11, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

```{r}
pacman::p_load(sf, spdep, GWmodel, SpatialML, tmap, rsample, yardstick, tidyverse, knitr, kableExtra, spatialRF)
```

```{r}
mdata <- read_rds("data/mdata.rds")
```

```{r}
set.seed(1234)
HDB_sample <- mdata %>% sample_n(1500)
```

```{r}
overlapping_points <- HDB_sample %>% 
  mutate(overlap= lengths(st_equals(., .)) > 1)
summary(overlapping_points$overlap)
```

```{r}
HDB_sample <- HDB_sample %>% st_jitter(amount = 5)
```

```{r}
resale_split <- initial_split(HDB_sample, prop = 6.67/10,)
train_data <- training(resale_split)
test_data <- testing(resale_split)

write_rds(train_data, "data/train_data.rds")
write_rds(test_data, "data/test_data.rds")
```

```{r}
library(ggstatsplot)
mdata_nogeo <- mdata %>% st_drop_geometry()
ggstatsplot::ggcorrmat(mdata_nogeo[, 2:17])
```

```{r}
price_mlr <- lm(resale_price ~ floor_area_sqm +
                  storey_order + remaining_lease_mths +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL + 
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                data=train_data)
summary(price_mlr)
```

```{r}
gwr_bw_train_ad <- bw.gwr(resale_price ~ floor_area_sqm +
                  storey_order + remaining_lease_mths +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL + 
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                  data=train_data,
                  approach="CV",
                  kernel="gaussian",
                  adaptive=TRUE,
                  longlat=FALSE)
```

```{r}
gwr_ad <- gwr.basic(formula = resale_price ~
                            floor_area_sqm + storey_order +
                            remaining_lease_mths + PROX_CBD + 
                            PROX_ELDERLYCARE + PROX_HAWKER +
                            PROX_MRT + PROX_PARK + PROX_MALL + 
                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                            WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                            WITHIN_1KM_PRISCH,
                          data=train_data,
                          bw=20, 
                          kernel = 'gaussian', 
                          adaptive=TRUE,
                          longlat = FALSE)
```

```{r}
gwr_pred <- gwr.predict(formula = resale_price ~
                          floor_area_sqm + storey_order +
                          remaining_lease_mths + PROX_CBD + 
                          PROX_ELDERLYCARE + PROX_HAWKER + 
                          PROX_MRT + PROX_PARK + PROX_MALL + 
                          PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                          WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + 
                          WITHIN_1KM_PRISCH, 
                        data=train_data, 
                        predictdata = test_data, 
                        bw=40, 
                        kernel = 'gaussian', 
                        adaptive=TRUE, 
                        longlat = FALSE)

```

```{r}
gwr_pred_df <- as.data.frame(gwr_pred$SDF$prediction) %>%
  rename(gwr_pred= "gwr_pred$SDF$prediction")
```

```{r}
coords <- st_coordinates(HDB_sample)
coords_train <- st_coordinates(train_data)
coords_test <- st_coordinates(test_data)

```

```{r}
train_data_nogeom <- train_data %>% st_drop_geometry()
```

```{r}
set.seed(1234)
rf <- ranger(resale_price ~ floor_area_sqm + storey_order + 
               remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + 
               PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL + 
               PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
               WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + 
               WITHIN_1KM_PRISCH,
             data=train_data_nogeom)
rf
```

```{r}
test_data_nogeom <- cbind(test_data, coords_test) %>%
  st_drop_geometry()
```

```{r}
rf_pred <- predict(rf, data = test_data_nogeom)
```

```{r}
rf_pred_df <- as.data.frame(rf_pred$predictions) %>%
  rename(rf_pred = "rf_pred$predictions")
```

```{r}
set.seed(1234)
grf_ad <- grf(formula = resale_price ~ floor_area_sqm + storey_order +
                       remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE +
                       PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL +
                       PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                       WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                       WITHIN_1KM_PRISCH,
                     dframe=train_data_nogeom, 
                     bw=20,
                     kernel="adaptive",
                     coords=coords_train)
```

```{r}
grf_pred <- predict.grf(grf_ad, 
                           test_data_nogeom, 
                           x.var.name="X",
                           y.var.name="Y", 
                           local.w=1,
                           global.w=0)

```

```{r}
grf_pred_df <- as.data.frame(grf_pred)

```

```{r}
test_data_pred <- test_data %>%
  select(resale_price) %>%
  cbind(gwr_pred_df)%>%
  cbind(rf_pred_df)%>%
  cbind(grf_pred_df)
```

```{r}
test_longer <- test_data_pred %>% st_drop_geometry() %>%
  pivot_longer(cols = ends_with("pred"),
               names_to = "model",
               values_to = "predicted")
```

```{r}
model_labels <- c(gwr_pred = "gwr",
                  rf_pred = "random forest",
                  grf_pred = "gwRF")
test_longer <- test_longer %>%
  mutate(model = recode(model, !!!model_labels))
```

```{ggplot(rmse_results, aes(x = reorder(model, rmse),}
                         y = rmse,
                         fill = "skyblue")) +
  geom_bar(stat = "identity",
           fill = "skyblue",
           color = "black",
           width = 0.7) +
  labs(title = "RMSE Comparison of Mod",
       y = "RMSE",
       x = "Model") +
  theme_minimal()
```

```{r}
var_imp <- data.frame(Variable=names(grf_ad$Global.Model$variable.importance),
                      Importance = grf_ad$Global.Model$variable.importance)
```

```{r}
ggplot(var_imp, aes(x = reorder(Variable, Importance),
                         y = Importance,
                         )) +
  geom_bar(stat = "identity",
           fill = "skyblue") + 
  coord_flip() +
  labs(title = "Variable Importance from Ranger Model",
       y = "Variables",
       x = "Importance") +
  theme_minimal()
```
