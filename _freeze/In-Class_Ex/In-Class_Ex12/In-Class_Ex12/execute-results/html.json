{
  "hash": "167886b4c7e2f44032714341a405c953",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-Class Exercise 12\"\nauthor: \"Ooi Wen Xian\"\ndate: \"November 11, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spdep, GWmodel, SpatialML, tmap, rsample, yardstick, tidyverse, knitr, kableExtra, spatialRF)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmdata <- read_rds(\"data/mdata.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nHDB_sample <- mdata %>% sample_n(1500)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\noverlapping_points <- HDB_sample %>% \n  mutate(overlap= lengths(st_equals(., .)) > 1)\nsummary(overlapping_points$overlap)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Mode   FALSE    TRUE \nlogical    1047     453 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nHDB_sample <- HDB_sample %>% st_jitter(amount = 5)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_split <- initial_split(HDB_sample, prop = 6.67/10,)\ntrain_data <- training(resale_split)\ntest_data <- testing(resale_split)\n\nwrite_rds(train_data, \"data/train_data.rds\")\nwrite_rds(test_data, \"data/test_data.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggstatsplot)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'ggstatsplot' was built under R version 4.4.2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nYou can cite this package as:\n     Patil, I. (2021). Visualizations with statistical details: The 'ggstatsplot' approach.\n     Journal of Open Source Software, 6(61), 3167, doi:10.21105/joss.03167\n```\n\n\n:::\n\n```{.r .cell-code}\nmdata_nogeo <- mdata %>% st_drop_geometry()\nggstatsplot::ggcorrmat(mdata_nogeo[, 2:17])\n```\n\n::: {.cell-output-display}\n![](In-Class_Ex12_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprice_mlr <- lm(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                data=train_data)\nsummary(price_mlr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths + \n    PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK + \n    PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN + \n    WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH, \n    data = train_data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-176088  -38259    -311   33400  218441 \n\nCoefficients:\n                          Estimate Std. Error t value Pr(>|t|)    \n(Intercept)               71827.94   34259.62   2.097 0.036286 *  \nfloor_area_sqm             2810.31     289.07   9.722  < 2e-16 ***\nstorey_order              14251.20    1070.16  13.317  < 2e-16 ***\nremaining_lease_mths        362.08      14.73  24.579  < 2e-16 ***\nPROX_CBD                 -16017.44     631.87 -25.349  < 2e-16 ***\nPROX_ELDERLYCARE         -10865.98    3175.55  -3.422 0.000648 ***\nPROX_HAWKER              -20941.91    4088.97  -5.122 3.64e-07 ***\nPROX_MRT                 -39237.45    5474.82  -7.167 1.50e-12 ***\nPROX_PARK                -14275.17    4569.31  -3.124 0.001835 ** \nPROX_MALL                -13442.29    6637.71  -2.025 0.043122 *  \nPROX_SUPERMARKET          -7028.14   13003.93  -0.540 0.589000    \nWITHIN_350M_KINDERGARTEN  10744.68    2059.14   5.218 2.20e-07 ***\nWITHIN_350M_CHILDCARE     -1836.86    1206.44  -1.523 0.128193    \nWITHIN_350M_BUS             918.07     726.83   1.263 0.206846    \nWITHIN_1KM_PRISCH        -10278.97    1570.99  -6.543 9.68e-11 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 61180 on 985 degrees of freedom\nMultiple R-squared:  0.7387,\tAdjusted R-squared:  0.7349 \nF-statistic: 198.9 on 14 and 985 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_bw_train_ad <- bw.gwr(resale_price ~ floor_area_sqm +\n                  storey_order + remaining_lease_mths +\n                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +\n                  PROX_MRT + PROX_PARK + PROX_MALL + \n                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                  WITHIN_1KM_PRISCH,\n                  data=train_data,\n                  approach=\"CV\",\n                  kernel=\"gaussian\",\n                  adaptive=TRUE,\n                  longlat=FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth: 625 CV score: 3.456917e+12 \nAdaptive bandwidth: 394 CV score: 3.230272e+12 \nAdaptive bandwidth: 250 CV score: 2.879913e+12 \nAdaptive bandwidth: 162 CV score: 2.572617e+12 \nAdaptive bandwidth: 107 CV score: 2.216176e+12 \nAdaptive bandwidth: 73 CV score: 1.921762e+12 \nAdaptive bandwidth: 52 CV score: 1.735282e+12 \nAdaptive bandwidth: 39 CV score: 1.618876e+12 \nAdaptive bandwidth: 31 CV score: 1.527241e+12 \nAdaptive bandwidth: 26 CV score: 1.487803e+12 \nAdaptive bandwidth: 23 CV score: 1.467045e+12 \nAdaptive bandwidth: 21 CV score: 1.470683e+12 \nAdaptive bandwidth: 24 CV score: 1.469281e+12 \nAdaptive bandwidth: 22 CV score: 1.469197e+12 \nAdaptive bandwidth: 23 CV score: 1.467045e+12 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_ad <- gwr.basic(formula = resale_price ~\n                            floor_area_sqm + storey_order +\n                            remaining_lease_mths + PROX_CBD + \n                            PROX_ELDERLYCARE + PROX_HAWKER +\n                            PROX_MRT + PROX_PARK + PROX_MALL + \n                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                            WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                            WITHIN_1KM_PRISCH,\n                          data=train_data,\n                          bw=20, \n                          kernel = 'gaussian', \n                          adaptive=TRUE,\n                          longlat = FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_pred <- gwr.predict(formula = resale_price ~\n                          floor_area_sqm + storey_order +\n                          remaining_lease_mths + PROX_CBD + \n                          PROX_ELDERLYCARE + PROX_HAWKER + \n                          PROX_MRT + PROX_PARK + PROX_MALL + \n                          PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                          WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + \n                          WITHIN_1KM_PRISCH, \n                        data=train_data, \n                        predictdata = test_data, \n                        bw=40, \n                        kernel = 'gaussian', \n                        adaptive=TRUE, \n                        longlat = FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_pred_df <- as.data.frame(gwr_pred$SDF$prediction) %>%\n  rename(gwr_pred= \"gwr_pred$SDF$prediction\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- st_coordinates(HDB_sample)\ncoords_train <- st_coordinates(train_data)\ncoords_test <- st_coordinates(test_data)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data_nogeom <- train_data %>% st_drop_geometry()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nrf <- ranger(resale_price ~ floor_area_sqm + storey_order + \n               remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + \n               PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL + \n               PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n               WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + \n               WITHIN_1KM_PRISCH,\n             data=train_data_nogeom)\nrf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRanger result\n\nCall:\n ranger(resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths +      PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK +      PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +      WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH,      data = train_data_nogeom) \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      1000 \nNumber of independent variables:  14 \nMtry:                             3 \nTarget node size:                 5 \nVariable importance mode:         none \nSplitrule:                        variance \nOOB prediction error (MSE):       2380608288 \nR squared (OOB):                  0.8314446 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_nogeom <- cbind(test_data, coords_test) %>%\n  st_drop_geometry()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_pred <- predict(rf, data = test_data_nogeom)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_pred_df <- as.data.frame(rf_pred$predictions) %>%\n  rename(rf_pred = \"rf_pred$predictions\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\ngrf_ad <- grf(formula = resale_price ~ floor_area_sqm + storey_order +\n                       remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE +\n                       PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL +\n                       PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +\n                       WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +\n                       WITHIN_1KM_PRISCH,\n                     dframe=train_data_nogeom, \n                     bw=20,\n                     kernel=\"adaptive\",\n                     coords=coords_train)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nNumber of Observations: 1000\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNumber of Independent Variables: 14\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nKernel: Adaptive\nNeightbours: 20\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n--------------- Global ML Model Summary ---------------\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRanger result\n\nCall:\n ranger(resale_price ~ floor_area_sqm + storey_order + remaining_lease_mths +      PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER + PROX_MRT + PROX_PARK +      PROX_MALL + PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +      WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + WITHIN_1KM_PRISCH,      data = train_data_nogeom, num.trees = 500, mtry = 4, importance = \"impurity\",      num.threads = NULL) \n\nType:                             Regression \nNumber of trees:                  500 \nSample size:                      1000 \nNumber of independent variables:  14 \nMtry:                             4 \nTarget node size:                 5 \nVariable importance mode:         impurity \nSplitrule:                        variance \nOOB prediction error (MSE):       2136776587 \nR squared (OOB):                  0.8487088 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nImportance:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          floor_area_sqm             storey_order     remaining_lease_mths \n            7.159477e+11             1.628432e+12             2.490644e+12 \n                PROX_CBD         PROX_ELDERLYCARE              PROX_HAWKER \n            4.298247e+12             5.218395e+11             5.760795e+11 \n                PROX_MRT                PROX_PARK                PROX_MALL \n            8.914829e+11             5.049980e+11             4.065781e+11 \n        PROX_SUPERMARKET WITHIN_350M_KINDERGARTEN    WITHIN_350M_CHILDCARE \n            3.972638e+11             1.698057e+11             2.444726e+11 \n         WITHIN_350M_BUS        WITHIN_1KM_PRISCH \n            2.468555e+11             7.374575e+11 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nMean Square Error (Not OOB): 407330280.502\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nR-squared (Not OOB) %: 97.113\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nAIC (Not OOB): 19855.135\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nAICc (Not OOB): 19855.623\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\n--------------- Local Model Summary ---------------\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nResiduals OOB:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n-288000.0  -23927.3   -1310.4    -537.9   19889.8  359041.7 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nResiduals Predicted (Not OOB):\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n-50247.21  -2997.94    -98.15     74.63   2769.63  59034.15 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nLocal Variable Importance:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                               Min          Max        Mean         StD\nfloor_area_sqm                   0  89635587582  7029580101 12941687834\nstorey_order              40000330 163708068108  6446448675 17375219046\nremaining_lease_mths     174069976 145131635364 16277643768 27813980031\nPROX_CBD                 145373286  81909599359  7308119488 11216116702\nPROX_ELDERLYCARE         130328110  78145356816  5840109978  8679625960\nPROX_HAWKER              154896233  66385964554  5833670782  9184592794\nPROX_MRT                 128206881  91804103104  6683840977 10988018698\nPROX_PARK                186155738  90770047385  5942855090 10032763736\nPROX_MALL                101726281  89407746700  6703558853 11189048099\nPROX_SUPERMARKET         156196670  71855283817  5445580025  9625873895\nWITHIN_350M_KINDERGARTEN         0  57503628308  2030324559  4760671978\nWITHIN_350M_CHILDCARE     39385293  72947683369  3884212447  7860081930\nWITHIN_350M_BUS           28362326 115537369011  3881658262  8630476229\nWITHIN_1KM_PRISCH                0  60199489261  1833400797  3686371426\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nMean squared error (OOB): 3046103367.668\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nR-squared (OOB) %: 78.411\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nAIC (OOB): 21867.129\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nAICc (OOB): 21867.617\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nMean squared error Predicted (Not OOB): 66804500.987\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nR-squared Predicted (Not OOB) %: 99.527\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nAIC Predicted (Not OOB): 18047.281\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nAICc Predicted (Not OOB): 18047.769\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nCalculation time (in seconds): 16.5817\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngrf_pred <- predict.grf(grf_ad, \n                           test_data_nogeom, \n                           x.var.name=\"X\",\n                           y.var.name=\"Y\", \n                           local.w=1,\n                           global.w=0)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngrf_pred_df <- as.data.frame(grf_pred)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_pred <- test_data %>%\n  select(resale_price) %>%\n  cbind(gwr_pred_df)%>%\n  cbind(rf_pred_df)%>%\n  cbind(grf_pred_df)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_longer <- test_data_pred %>% st_drop_geometry() %>%\n  pivot_longer(cols = ends_with(\"pred\"),\n               names_to = \"model\",\n               values_to = \"predicted\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_labels <- c(gwr_pred = \"gwr\",\n                  rf_pred = \"random forest\",\n                  grf_pred = \"gwRF\")\ntest_longer <- test_longer %>%\n  mutate(model = recode(model, !!!model_labels))\n```\n:::\n\n\n```{ggplot(rmse_results, aes(x = reorder(model, rmse),}\n                         y = rmse,\n                         fill = \"skyblue\")) +\n  geom_bar(stat = \"identity\",\n           fill = \"skyblue\",\n           color = \"black\",\n           width = 0.7) +\n  labs(title = \"RMSE Comparison of Mod\",\n       y = \"RMSE\",\n       x = \"Model\") +\n  theme_minimal()\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvar_imp <- data.frame(Variable=names(grf_ad$Global.Model$variable.importance),\n                      Importance = grf_ad$Global.Model$variable.importance)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(var_imp, aes(x = reorder(Variable, Importance),\n                         y = Importance,\n                         )) +\n  geom_bar(stat = \"identity\",\n           fill = \"skyblue\") + \n  coord_flip() +\n  labs(title = \"Variable Importance from Ranger Model\",\n       y = \"Variables\",\n       x = \"Importance\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](In-Class_Ex12_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "In-Class_Ex12_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}