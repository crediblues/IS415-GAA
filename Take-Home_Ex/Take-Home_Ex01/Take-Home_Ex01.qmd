---
title: "Take Home Exercise 1"
subtitle: "Geospatial Analytics for Social Good: Application of Spatial and Spatio-temporal Point Patterns Analysis to discover the geographical distribution of Armed Conflict in Myanmar"
author: "Ooi Wen Xian"
date: "September 7, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
---

# 1.0 Overview

## Background

Millions of people have their lives shattered by armed conflict – wars – every year.

Armed conflict has been on the rise since about 2012, after a decline in the 1990s and early 2000s. First came conflicts in Libya, Syria and Yemen, triggered by the 2011 Arab uprisings. Libya’s instability spilled south, helping set off a protracted crisis in the Sahel region. A fresh wave of major combat followed: the 2020 Azerbaijani-Armenian war over the Nagorno-Karabakh enclave, horrific fighting in Ethiopia’s northern Tigray region that began weeks later, the conflict prompted by the Myanmar army’s 2021 power grab and Russia’s 2022 assault on Ukraine. Add to those 2023’s devastation in Sudan and Gaza. Around the globe, more people are dying in fighting, being forced from their homes or in need of life-saving aid than in decades.

Source: [10 Conflicts to Watch in 2024](https://www.crisisgroup.org/global/10-conflicts-watch-2024)

## Study Objective

Geospatial analytics hold tremendous potential to address complex problems facing society. In this study, I would be applying spatial point patterns analysis methods to discover the spatial and spatio-temporal distribution of armed conflict in Myanmar.

## Context of Data

### Armed conflict data

For the purpose of this assignment, armed conflict data of Myanmar between 2021-2024 from [Armed Conflict Location & Event Data (ACLED)](https://acleddata.com/), an independent, impartial, international non-profit organization collecting data on violent conflict and protest in all countries and territories in the world, should be used.

In terms of event types, students should focus on at least four main event types, namely: Battles, Explosion/Remote violence, Strategic developments, and Violence against civilians.

In terms of study period, I would be focusing on quarterly armed conflict events from January 2021 until June 2024.

### GIS Data

-   [Geospatial data](http://geonode.themimu.info/layers/?limit=100&offset=0) on [Myanmar Information Management Unit, MIMU](http://www.themimu.info/)

# 2.0 Set-up

## Importing R packages

The following packages are used for this study:

-   sf, to import, manage and process vector-based geospatial data in R.

-   spatstat, to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer.

-   raster, to convert image output generate by spatstat into raster format.

-   tmap, to create thematic maps

-   tidyverse,

-   lubridate,

```{r}
pacman::p_load(png, sp, sf, raster, spatstat, tmap, tmaptools, tidyverse, lubridate, sparr, osmdata)
```

## Data Preprocessing

### Armed conflict data

```{r}
# Load the armed conflict data
conflict_data <- read_csv("data/raw/2021-01-01-2024-06-30-Southeast_Asia-Myanmar.csv")
```

Convert armed conflict data to sf format

```{r}
conflict_data
```

Myanmar falls within UTM Zone 47N and UTM Zone 48N.

For most parts of central and western Myanmar, UTM Zone 47N (EPSG: 32647) is used. For the eastern regions, UTM Zone 48N (EPSG: 32648) is used. Since the data spans across the entire country, I would be using EPSG: 32647 (UTM Zone 47N).

```{r}
# CRS 4326 is for WGS84 (used in GPS)
conflict_sf <- st_as_sf(conflict_data, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 32647)
```

```{r}
conflict_sf
```

```{r}
st_geometry(conflict_sf)
```

Looking at the attributes of conflict_sf, there are 3 issues with attributes.

1.  event_date is in chr format. We shall convert event_date to a date format.

2.  Timestamps are in the number of seconds that have passed since the Unix Epoch, we shall convert them to weekdays, hours and days format that can be utilised for further analysis

```{r}
conflict_sf$event_date <- as.Date(conflict_sf$event_date, format = "%d %B %Y")
conflict_sf$timestamp <- as_datetime(conflict_sf$timestamp, tz = "Asia/Yangon")
head(conflict_sf)
```

After dealing with the date and timestamps, we can now drop columns that we would not be using as they do not provide significant value for the geospatial or spatio-temporal analysis:

1.  time_precision: Provides an indicator of how precise the event date is, but is not essential as we working with actual dates (event_date).

2.  disorder_type: May provide some background, but redundant since we already have the event_type and sub_event_type.

3.  assoc_actor_1, assoc_actor_2: We would not be focusing on assoc_actors

4.  civilian_targeting: Redundant with event_type.

5.  iso: ISO country code (since we are only dealing with Myanmar, this could be dropped).

6.  region, country: dropped as they all refer to Myanmar and Southeast Asia, as this is already implied.

7.  source, source_scale: Information about the data source is generally not needed for analysis, unless we doing source-specific analysis.

8.  inter1, inter2: Code summarizing the interaction between actors, redundant asv we are already using actor1 and actor2.

9. tags: not useful as we are not analyzing event metadata

10.  notes: Detailed event notes, which may not be essential for the quantitative aspects of the analysis.

Summary of Key Columns to Keep:
event_id_cnty, event_date, year, disorder_type, event_type, sub_event_type, actor1, actor2, interaction, admin1, admin2, admin3, location, geo_precision, fatalities, timestamp, geometry.

```{r}
conflict_sf <- conflict_sf %>%
  select(-time_precision, -disorder_type, -assoc_actor_1, -assoc_actor_2, 
         -civilian_targeting, -iso, -region, -country, -source, 
         -source_scale, -inter1, -inter2, -tags, -notes)
summary(conflict_sf)
```
We would also extract quarters from the conflict data
```{r}
conflict_sf <- conflict_sf %>%
  mutate(quarter = quarter(event_date, with_year = TRUE),
         year = year(event_date),
         quarter_year = paste(year, quarter, sep = " Q"))
```
```{r}
selected_event_types <- c("Battles", "Explosion/Remote violence", "Strategic developments", "Violence against civilians")
conflict_sf_filtered <- conflict_sf %>%
  filter(event_type %in% selected_event_types)
```

### Geospatial Data

```{r}
# Load the geospatial data
admin_boundaries_sf <- st_read(dsn = "data/raw",
                         layer = "mmr_polbnda2_adm1_250k_mimu_1") # MIMU boundary data
```

```{r}
admin_boundaries_sf <- st_transform(admin_boundaries_sf, 32647)
admin_boundaries_sf
```
Upon further research into the attributes of admin_boundaries, ST_MMR is a string combination of ST and ST_RG. Hence, we can drop ST_MMR.
```{r}
admin_boundaries_sf <- admin_boundaries_sf %>%
  select(-ST_MMR)
summary(admin_boundaries_sf)
```
```{r}
st_crs(admin_boundaries_sf)
```

```{r}
plot(admin_boundaries_sf)
```

```{r}
plot(st_geometry(admin_boundaries_sf))
```

```{r}
tmap_mode("plot")
qtm(admin_boundaries_sf)+tm_shape(conflict_sf)+tm_dots()
```

## Preparation for Spatial Point Analysis

### Converting sf data frames to sp’s Spatial\* class

Before we convert sf data frames to sp’s Spatial\* class, we would need to split the conflict data quarterly for our quarterly KDE layers later on.
```{r}
quarterly_conflict_sf <- split(conflict_sf_filtered, conflict_sf_filtered$quarter)
```

To convert each quarter's data to ppp format, we can write a function to do so.
```{r}
convert_sf_to_ppp <- function(sf_data) {
  conflict_asp <- as_Spatial(sf_data)
  conflict_sp <- as(conflict_asp, "SpatialPoints")
  conflict_ppp <- as.ppp(st_coordinates(conflict_sf_filtered), st_bbox(conflict_sf_filtered))
  return(conflict_ppp)
}

quarterly_ppp <- lapply(quarterly_conflict_sf, convert_sf_to_ppp)
```
Noticing that we have duplicates in the data, we would have to handle these duplicates. In spatial point patterns analysis, an issue of significant is the presence of duplicates. The statistical methodology used for spatial point patterns processes is based largely on the assumption that process are simple, that is, that the points cannot be coincident.

We would do the following steps:
1.   Check for the number of duplicates for each conflict_ppp.

2.   Using the multiplicity() function, we would count the number of locations that have more than 1 conflict

3.   To resolve the duplicate issue, we would use jittering, which will add a small perturbation to the duplicate points so that they do not occupy the exact same space.

```{r}
handle_duplicates <- function(ppp_obj) {
  # Check for any duplicates
  if(any(duplicated(ppp_obj))) {
    cat("Warning: data contain duplicated points\n")
    
    # Count the number of duplicated locations
    num_duplicates <- sum(multiplicity(ppp_obj) > 1)
    cat("Number of locations with duplicates:", num_duplicates, "\n")
    
    # Apply jittering to resolve duplicates
    ppp_jit <- rjitter(ppp_obj, retry=TRUE, nsim=1, drop=TRUE)
    if(any(duplicated(ppp_jit))) {
      cat("Jittering still leaves some duplicates.\n")
    } else {
      cat("Duplicates resolved after jittering.\n")
    }
    
    return(ppp_jit)
  } else {
    cat("No duplicates found.\n")
    return(ppp_obj)
  }
}

quarterly_ppp <- lapply(quarterly_ppp, handle_duplicates)
```
We can see the details of a ppp objects in quarterly_ppp as shown below. Quarter '2021.2' is used as an example.
```{r}
summary(quarterly_ppp[[1]])
```
Let's convert our admin_boundaries sf dataframe to ppp objects as well.

```{r}
admin_boundaries_asp <- as_Spatial(admin_boundaries_sf)
admin_boundaries_sp <- as(admin_boundaries_asp, "SpatialPolygons")
```

The analysis with a geographical area like Myanmar boundary. In spatstat, an object called owin is specially designed to represent this polygonal region. The owin object can be displayed below.

```{r}
admin_boundary_owin <- as.owin(admin_boundaries_sf)
plot(admin_boundary_owin)
```

```{r}
summary(admin_boundary_owin)
```

In the last step of geospatial data wrangling, we would extract conflict events that are located within Myanmar.
```{r}
extract_ppp_within_boundary <- function(ppp_object, boundary) {
  filtered_ppp <- ppp_object[boundary]
  return(filtered_ppp)
}

# Apply the function to each ppp object in the list
quarterly_ppp_mmr <- lapply(quarterly_ppp, extract_ppp_within_boundary, boundary = admin_boundary_owin)

# Check summaries for each filtered ppp object
lapply(quarterly_ppp_mmr, summary)

```
```{r}
plot_ppp_object <- function(ppp_object) {
  plot(ppp_object)
}
par(mar = c(4, 4, 2, 1))

plot_list <- lapply(seq_along(quarterly_ppp_mmr), function(i) {
  plot_ppp_object(quarterly_ppp_mmr[[i]])
})
```

# 3.0 First-order Spatial Point Patterns Analysis

## Kernel Density Estimation
### Automatic bandwidth selection
The method is diggle, smoothing kernel is gaussian and edge bias correction is enabled.
```{r}
kde_quarterly_ppp_mmr_bw <- lapply(quarterly_ppp_mmr, function(ppp_object) {
  density(ppp_object, 
          sigma=bw.diggle,  # Bandwidth parameter
          edge=TRUE,        # Edge bias correction
          kernel="gaussian" # Gaussian kernel
          )
})
for (i in 1:length(kde_quarterly_ppp_mmr_bw)) {
  plot(kde_quarterly_ppp_mmr_bw[[i]], main = paste("KDE Plot for Quarter", i))
}
```
Density values are too small to understand. Let's try increasing the bandwidth for a better visualisation.
```{r}
for (i in 1:length(quarterly_ppp_mmr)) {
  quarterly_ppp_mmr[[i]] <- rescale.ppp(quarterly_ppp_mmr[[i]], 1000, "km")
}
```
```{r}
sig <- 15.0
kde_quarterly_ppp_mmr_bw <- lapply(quarterly_ppp_mmr, function(ppp_object) {
  density(ppp_object, 
          sigma=sig,  # Bandwidth parameter
          edge=TRUE,        # Edge bias correction
          kernel="gaussian" # Gaussian kernel
          )
})
```
```{r}
for (i in 1:length(kde_quarterly_ppp_mmr_bw)) {
  plot(kde_quarterly_ppp_mmr_bw[[i]], main = paste("KDE Plot for Quarter", i))
}
```

# 4.0 Second-order Spatial Point Patterns Analysis
Due to the large amount of conflict data, we would be focusing on high density areas for our second-order spatial point patterns analysis. 
From the previous KDE plots, we can derive that the states/regions with high density are:

States: Shan (North), Kayah, Kachin

Regions: Sagaing, Magway, Mandalay, Shan (North), Chin, Yangon

We would need to derive the ppp objects again to be specific for these states/regions.

Filter sf Data for Specific Regions/States
```{r}
# Filter Data for Specific Regions/States
regions_states <- c("Shan (North)", "Kayah", "Kachin", "Sagaing", "Magway", "Mandalay", "Chin", "Yangon")

# Filter quarterly data to include only the specified regions and states
# Acled data knowledge base indicates admin 1 as the largest sub-national administrative region in which the event took place. Hence we would focus on admin 1 events.
filter_conflict_data <- function(sf_data) {
  sf_data %>%
    filter(admin1 %in% regions_states)
}

# Apply filtering to each quarter in the list
filtered_quarterly_sf <- lapply(quarterly_conflict_sf, filter_conflict_data)
```
Convert sf to ppp
```{r}
filtered_quarterly_ppp <- lapply(filtered_quarterly_sf, convert_sf_to_ppp)
```
```{r}
filtered_quarterly_ppp <- lapply(filtered_quarterly_ppp, handle_duplicates)
```
```{r}
summary(filtered_quarterly_ppp[[1]])
```
## Analysing Spatial Point Process Using F-Function
### Computing F-Function Estimation

We would be using F function to estimate the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape. 

F function measures the distribution of distances from a typical point to the nearest observed point.
F function is also computationally inexpensive compared to K, L, G functions because it only considers the distances from a set of test points to the nearest event.

From the spatstat package, we would be using Fest() and envelope() for F function estimation and monte carlo simulation test respectively.
```{r}
F_quarterly_ppp_mmr <- lapply(filtered_quarterly_ppp, function(ppp_object) {
  Fest(ppp_object)
})
```
```{r}
for (i in 1:length(F_quarterly_ppp_mmr)) {
  plot(F_quarterly_ppp_mmr[[i]], main = paste("F Function for Quarter", i))
}
```

### Performing Complete Spatial Randomness Test
To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of armed conflict events in Myanmar is randomly distributed.

H1= The distribution of armed conflict events in Myanmar is not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

A Monte Carlo test will be employed using the F-function to compare the observed spatial pattern with a simulated pattern under the assumption of complete spatial randomness (CSR). By comparing the observed F-function to the distribution of simulated F-functions, we can assess whether the pattern deviates from randomness.

```{r}
set.seed(123) # For reproducibility
F_quarterly_ppp_mmr_envelope <- lapply(filtered_quarterly_ppp, function(ppp_object) {
  envelope(ppp_object, Fest, nsim = 99)
})
```
```{r}
for (i in 1:length(F_quarterly_ppp_mmr_envelope)) {
  plot(F_quarterly_ppp_mmr_envelope[[i]], main = paste("F Function csr for Quarter", i))
}
```

# 5.0 Spatio-Temporal Point Patterns Analysis
spattemp.density() of sparr package is used to compute STKDE.

```{r}
filtered_quarterly_sf_combined <- bind_rows(filtered_quarterly_sf, .id = "quarter_year")
```
```{r}
tmap_mode('plot')
tm_shape(admin_boundaries_sf)+
  tm_polygons() +
tm_shape(filtered_quarterly_sf_combined) +
  tm_dots(size = 0.1) +
tm_facets(by="quarter_year", 
            free.coords=FALSE, 
            drop.units = TRUE)
```
To do Spatio Temporal Analysis, we need to add in the mark for the ppp objects. We would first convert the event_date to numeric forms.
```{r}
  filtered_quarterly_sf_combined <- filtered_quarterly_sf_combined %>% select(quarter) %>%
  mutate(quarter_num = dense_rank(quarter))
```
```{r}
filtered_quarterly_sf_combined <- filtered_quarterly_sf_combined %>% select(quarter_num)
```

```{r}
filtered_quarterly_sf_combined_quarter_ppp <- as.ppp(filtered_quarterly_sf_combined)
filtered_quarterly_sf_combined_quarter_ppp
```
```{r}
summary(filtered_quarterly_sf_combined_quarter_ppp)
```
```{r}
any(duplicated(filtered_quarterly_sf_combined_quarter_ppp))
```
```{r}
filtered_quarterly_sf_combined_quarter_ppp <- handle_duplicates(filtered_quarterly_sf_combined_quarter_ppp)
```
```{r}
filtered_quarterly_sf_combined_quarter_owin <- filtered_quarterly_sf_combined_quarter_ppp[admin_boundary_owin]
summary(filtered_quarterly_sf_combined_quarter_owin)
```

```{r}
plot(filtered_quarterly_sf_combined_quarter_owin, main = paste("filtered_quarterly_owin"))
```

## Computing Spatio-temporal KDE
spattemp.density() of sparr package is used to compute the STKDE.
```{r}
st_kde <- spattemp.density(filtered_quarterly_sf_combined_quarter_owin)
```
```{r}
summary(st_kde)
```
```{r}
plot(st_kde)
```
# 6.0 Second-order Spatio-temporal Point Patterns Analysis
## Analysing Spatial Point Process Using F-Function
### Computing F-Function Estimation

We would be using F function to estimate the empty space function F(r) or its hazard rate h(r) from a point pattern in a window of arbitrary shape. 

F function measures the distribution of distances from a typical point to the nearest observed point.
F function is also computationally inexpensive compared to K, L, G functions because it only considers the distances from a set of test points to the nearest event.

From the spatstat package, we would be using Fest() and envelope() for F function estimation and monte carlo simulation test respectively.
```{r}
F_st = Fest(filtered_quarterly_sf_combined_quarter_owin)
plot(F_st)
```
### Performing Complete Spatial Randomness Test
To confirm the observed spatial patterns above, a hypothesis test will be conducted. The hypothesis and test are as follows:

Ho = The distribution of armed conflict events in Myanmar is randomly distributed.

H1= The distribution of armed conflict events in Myanmar is not randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

A Monte Carlo test will be employed using the F-function to compare the observed spatial pattern with a simulated pattern under the assumption of complete spatial randomness (CSR). By comparing the observed F-function to the distribution of simulated F-functions, we can assess whether the pattern deviates from randomness.

```{r}
set.seed(123) # For reproducibility
F_st.csr <- envelope(filtered_quarterly_sf_combined_quarter_owin, Fest, nsim = 99)
```
```{r}
plot(F_st.csr)
```
# 7.0 Displaying the KDE and Spatio-temporal KDE layers on openstreetmap of Myanmar.
Before we plot the KDE and Spatio-temporal KDE layers, we need to convert the KDE and spatio-temporal KDE layers to a format suitable for tmap. 

Converting KDE to raster
```{r}
kde_raster_list = list()
for (i in 1:length(kde_quarterly_ppp_mmr_bw)) {
  kde_raster_list[[i]] <- raster(kde_quarterly_ppp_mmr_bw[[i]])
  projection(kde_raster_list[[i]]) <- CRS("+init=EPSG:32647")
}
```

Converting Spatio-Temporal KDE to raster
```{r}
# Function to convert KDE to RasterLayer
kde_to_raster <- function(kde_obj) {
  # Convert the KDE object (im class) to a matrix
  kde_matrix <- as.matrix(kde_obj)
  
  # Create a raster from the matrix
  r <- raster(kde_matrix)
  
  # Set the extent of the raster to match the KDE object's extent
  extent(r) <- extent(kde_obj$xrange[1], kde_obj$xrange[2], kde_obj$yrange[1], kde_obj$yrange[2])
  
  # Return the RasterLayer
  return(r)
}

# Convert the list of KDE objects to RasterLayers
kde_rasters <- lapply(kde_quarterly_ppp_mmr_bw, kde_to_raster)

```


## KDE layers on openstreetmap of Myanmar
```{r}
tmap_mode('plot')
# Create a base map with OpenStreetMap
for (i in seq_along(kde_raster_list)) {
  map <- tm_shape(kde_raster_list[[i]]) +
    tm_raster(palette = "viridis", title = "KDE") +
    tm_basemap("OpenStreetMap")
  print(map)
}
```

## Spatio-temporal KDE layers on openstreetmap of Myanmar

```{r}
tmap_mode('plot')
for (i in seq_along(kde_rasters)) {
  tm <- tm_shape(kde_rasters[[i]]) +
        tm_raster(palette = "viridis", title = paste("KDE for Quarter", i)) +
        tm_basemap("OpenStreetMap")
  
  print(tm)
}
```

